// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface ISocketGateway {
    struct SocketControllerRequest {
        uint32 controllerId;
        bytes data;
    }
}

interface ISocketRequest {
    struct SwapMultiBridgeRequest {
        uint32 swapRouteId;
        bytes swapImplData;
        uint32[] bridgeRouteIds;
        bytes[] bridgeImplDataItems;
        uint256[] bridgeRatios;
        bytes[] eventDataItems;
    }
}

interface SocketGateway {
    fallback() external payable;

    function BRIDGE_AFTER_SWAP_SELECTOR() external view returns (bytes4);

    function CENT_PERCENT() external view returns (uint256);

    function addController(address controllerAddress) external returns (uint32);

    function addRoute(address routeAddress) external returns (uint32);

    function addressAt(uint32 routeId) external view returns (address);

    function claimOwner() external;

    function controllerCount() external view returns (uint32);

    function controllers(uint32) external view returns (address);

    function disableController(uint32 controllerId) external;

    function disableRoute(uint32 routeId) external;

    function disabledRouteAddress() external view returns (address);

    function executeController(
        ISocketGateway.SocketControllerRequest memory socketControllerRequest
    ) external payable returns (bytes memory);

    function executeControllers(
        ISocketGateway.SocketControllerRequest[] memory controllerRequests
    ) external payable;

    function executeRoute(
        uint32 routeId,
        bytes memory routeData
    ) external payable returns (bytes memory);

    function executeRoutes(
        uint32[] memory routeIds,
        bytes[] memory dataItems
    ) external payable;

    function getController(uint32 controllerId) external view returns (address);

    function getRoute(uint32 routeId) external view returns (address);

    function nominateOwner(address nominee_) external;

    function nominee() external view returns (address);

    function owner() external view returns (address);

    function rescueEther(address userAddress, uint256 amount) external;

    function rescueFunds(
        address token,
        address userAddress,
        uint256 amount
    ) external;

    function routes(uint32) external view returns (address);

    function routesCount() external view returns (uint32);

    function setApprovalForRouters(
        address[] memory routeAddresses,
        address[] memory tokenAddresses,
        bool isMax
    ) external;

    function swapAndMultiBridge(
        ISocketRequest.SwapMultiBridgeRequest memory swapMultiBridgeRequest
    ) external payable;

    receive() external payable;
}

interface IWrappedTokenSwapperImpl {
    function Identifier() external view returns (bytes32);

    function NATIVE_TOKEN_ADDRESS() external view returns (address);

    function SWAP_FUNCTION_SELECTOR() external view returns (bytes4);

    function SWAP_WITHIN_FUNCTION_SELECTOR() external view returns (bytes4);

    function killme() external;

    function performAction(
        address fromToken,
        address toToken,
        uint256 amount,
        address receiverAddress,
        bytes32 metadata,
        bytes memory swapExtraData
    ) external payable returns (uint256);

    function performActionWithIn(
        address fromToken,
        address toToken,
        uint256 amount,
        bytes32 metadata,
        bytes memory swapExtraData
    ) external payable returns (uint256, address);

    function rescueEther(address userAddress, uint256 amount) external;

    function rescueFunds(
        address token,
        address userAddress,
        uint256 amount
    ) external;

    function socketDeployFactory() external view returns (address);

    function socketGateway() external view returns (address);

    receive() external payable;
}
