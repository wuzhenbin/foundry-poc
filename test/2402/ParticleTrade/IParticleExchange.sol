// SPDX-License-Identifier: MIT
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IParticleExchange {
    struct Lien {
        address lender;
        address borrower;
        address collection;
        uint256 tokenId;
        uint256 price;
        uint256 rate;
        uint256 loanStartTime;
        uint256 auctionStartTime;
    }

    function WETH_ADDRESS() external view returns (address);

    function acceptBidSellNftToMarketPull(
        Lien memory lien,
        uint256 lienId,
        uint256 tokenId,
        uint256 amount,
        address marketplace,
        address puller,
        bytes memory tradeData
    ) external;

    function acceptBidSellNftToMarketPush(
        Lien memory lien,
        uint256 lienId,
        uint256 tokenId,
        uint256 amount,
        address marketplace,
        bytes memory tradeData
    ) external;

    function acceptOwnership() external;

    function accountBalance(
        address account
    ) external view returns (uint256 balance);

    function auctionSellNft(
        Lien memory lien,
        uint256 lienId,
        uint256 tokenId
    ) external;

    function buyNftFromMarket(
        Lien memory lien,
        uint256 lienId,
        uint256 tokenId,
        uint256 amount,
        address spender,
        address marketplace,
        bytes memory tradeData
    ) external;

    function cancelBid(Lien memory lien, uint256 lienId) external;

    function initialize() external;

    function liens(uint256 lienId) external view returns (bytes32 lienHash);

    function multicall(
        bytes[] memory data
    ) external returns (bytes[] memory results);

    function offerBid(
        address collection,
        uint256 margin,
        uint256 price,
        uint256 rate
    ) external payable returns (uint256 lienId);

    function onERC721Received(
        address,
        address from,
        uint256 tokenId,
        bytes memory data
    ) external returns (bytes4);

    function owner() external view returns (address);

    function pendingOwner() external view returns (address);

    function proxiableUUID() external view returns (bytes32);

    function refinanceLoan(
        Lien memory oldLien,
        uint256 oldLienId,
        Lien memory newLien,
        uint256 newLienId
    ) external payable;

    function registerMarketplace(address marketplace) external;

    function registeredMarketplaces(
        address marketplace
    ) external view returns (bool registered);

    function renounceOwnership() external;

    function repayWithNft(
        Lien memory lien,
        uint256 lienId,
        uint256 tokenId
    ) external;

    function sellNftToMarketPull(
        Lien memory lien,
        uint256 lienId,
        uint256 amount,
        address marketplace,
        address puller,
        bytes memory tradeData
    ) external payable;

    function sellNftToMarketPush(
        Lien memory lien,
        uint256 lienId,
        uint256 amount,
        address marketplace,
        bytes memory tradeData
    ) external payable;

    function setTreasuryRate(uint256 rate) external;

    function startLoanAuction(Lien memory lien, uint256 lienId) external;

    function stopLoanAuction(Lien memory lien, uint256 lienId) external;

    function supplyNft(
        address collection,
        uint256 tokenId,
        uint256 price,
        uint256 rate
    ) external returns (uint256 lienId);

    function swapWithEth(Lien memory lien, uint256 lienId) external payable;

    function transferOwnership(address newOwner) external;

    function unregisterMarketplace(address marketplace) external;

    function updateBid(
        Lien memory lien,
        uint256 lienId,
        uint256 margin,
        uint256 price,
        uint256 rate
    ) external payable;

    function updateLoan(
        Lien memory lien,
        uint256 lienId,
        uint256 price,
        uint256 rate
    ) external;

    function upgradeTo(address newImplementation) external;

    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable;

    function withdrawAccountBalance() external;

    function withdrawEth(Lien memory lien, uint256 lienId) external;

    function withdrawNft(Lien memory lien, uint256 lienId) external;

    function withdrawTreasury(address receiver) external;

    receive() external payable;
}
