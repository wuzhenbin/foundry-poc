// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IGame {
    event RenounceOwnership();

    function accountShare(address acc) external view returns (uint16);

    function auctionBidAddsTimer() external view returns (uint256);

    function auctionBidStepPrecesion() external view returns (uint256);

    function auctionBidStepShare() external view returns (uint256);

    function auctionEndTime() external view returns (uint256);

    function bidAddress() external view returns (address);

    function bidEther() external view returns (uint256);

    function canvas() external view returns (address);

    function chunkIndex(uint8 x, uint8 y) external pure returns (uint16);

    function chunkOverridePricePercent() external view returns (uint256);

    function chunkWriteAddsGameSeconds() external view returns (uint256);

    function chunksWritenCount() external view returns (uint256);

    function claim() external;

    function claimNft() external;

    function etherToClaimTotal() external view returns (uint256);

    function gameEndTime() external view returns (uint256);

    function getChunkOwner(uint8 x, uint8 y) external view returns (address);

    function getChunks() external view returns (ChunkData[576] memory);

    function getChunksCount() external pure returns (uint16 x, uint16 y);

    function getChunksOwners() external view returns (address[576] memory accs);

    function isAuction() external view returns (bool);

    function isAuctionEnd() external view returns (bool);

    function isClaimed(address) external view returns (bool);

    function isGameEnd() external view returns (bool);

    function isNftClaimed() external view returns (bool);

    function isStarted() external view returns (bool);

    function isWriteEnable() external view returns (bool);

    function makeBid() external payable;

    function newBidEtherMin() external view returns (uint256);

    function nft() external view returns (address);

    function owner() external view returns (address);

    function ownerRenounce() external;

    function setNft(address nftAddress) external;

    function setToken(address tokenAddress) external;

    function start() external;

    function startChunkWritePrice() external view returns (uint256);

    function token() external view returns (address);

    function tokenToClaimTotal() external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function writeChunks(ChunkWriteDto[] memory input) external;

    function writeChunksPrice(
        ChunkWriteDto[] memory input
    ) external view returns (uint256);

    function writeChunksPriceFor(
        ChunkWriteDto[] memory input,
        address account
    ) external view returns (uint256);

    receive() external payable;
}

struct ChunkData {
    address owner;
    uint256 price;
}

struct ChunkWriteDto {
    uint8 x;
    uint8 y;
    uint256 data;
}
