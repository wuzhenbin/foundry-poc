// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IPresaleBSCV5 {
    event ClaimStartUpdated(
        uint256 prevValue,
        uint256 newValue,
        uint256 timestamp
    );
    event Initialized(uint8 version);
    event MaxTokensUpdated(
        uint256 prevValue,
        uint256 newValue,
        uint256 timestamp
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event Paused(address account);
    event SaleTimeSet(uint256 _start, uint256 _end, uint256 timestamp);
    event SaleTimeUpdated(
        bytes32 indexed key,
        uint256 prevValue,
        uint256 newValue,
        uint256 timestamp
    );
    event TokensAdded(
        address indexed token,
        uint256 noOfTokens,
        uint256 timestamp
    );
    event TokensBought(
        address indexed user,
        uint256 indexed tokensBought,
        address indexed purchaseToken,
        uint256 amountPaid,
        uint256 usdEq,
        uint256 timestamp
    );
    event TokensBoughtAndStaked(
        address indexed user,
        uint256 indexed tokensBought,
        address indexed purchaseToken,
        uint256 amountPaid,
        uint256 usdEq,
        uint256 timestamp
    );
    event TokensClaimed(
        address indexed user,
        uint256 amount,
        uint256 timestamp
    );
    event TokensClaimedAndStaked(
        address indexed user,
        uint256 amount,
        uint256 timestamp
    );
    event Unpaused(address account);

    function USDTInterface() external view returns (address);

    function admin() external view returns (address);

    function aggregatorInterface() external view returns (address);

    function baseDecimals() external view returns (uint256);

    function blacklistUsers(address[] memory _usersToBlacklist) external;

    function buyWithBNB(
        uint256 amount,
        bool _stakeStaus
    ) external payable returns (bool);

    function buyWithUSDT(
        uint256 amount,
        bool _stakeStaus
    ) external returns (bool);

    function changeMaxTokensToBuy(uint256 _maxTokensToBuy) external;

    function changePaymentWallet(address _newPaymentWallet) external;

    function changeRoundsData(uint256[][3] memory _rounds) external;

    function checkPoint() external view returns (uint256);

    function claim() external returns (bool);

    function claimAndStake() external returns (bool);

    function claimStart() external view returns (uint256);

    function currentStep() external view returns (uint256);

    function directTotalTokensSold() external view returns (uint256);

    function directUsdPrice() external view returns (uint256);

    function dynamicSaleState() external view returns (bool);

    function dynamicTimeFlag() external view returns (bool);

    function endTime() external view returns (uint256);

    function fetchPrice(uint256 amountOut) external returns (uint256);

    function getLatestPrice() external view returns (uint256);

    function hasClaimed(address) external view returns (bool);

    function isBlacklisted(address) external view returns (bool);

    function isClaimLive() external view returns (bool);

    function isWhitelisted(address) external view returns (bool);

    function maxTokensToBuy() external view returns (uint256);

    function maxTokensToSell() external view returns (uint256);

    function newUserDepositeSeeder(
        address[] memory _users,
        uint256[] memory _newUserDeposits
    ) external;

    function newUserDeposits(address) external view returns (uint256);

    function newUserDepositsCount() external view returns (uint256);

    function owner() external view returns (address);

    function pause() external;

    function paused() external view returns (bool);

    function paymentWallet() external view returns (address);

    function percent() external view returns (uint256);

    function prevCheckpoints(uint256) external view returns (uint256);

    function quoter() external view returns (address);

    function remainingTokensTracker(uint256) external view returns (uint256);

    function removeFromBlacklist(
        address[] memory _userToRemoveFromBlacklist
    ) external;

    function removeFromWhitelist(
        address[] memory _userToRemoveFromWhitelist
    ) external;

    function renounceOwnership() external;

    function renounceSeeder() external;

    function roundDetails(uint256 _no) external view returns (uint256[] memory);

    function rounds(uint256, uint256) external view returns (uint256);

    function saleToken() external view returns (address);

    function seeder() external view returns (address);

    function seederLocked() external view returns (bool);

    function setClaimLiveStatus(bool _status) external;

    function setClaimWhitelistStatus(bool _status) external;

    function setDynamicSaleState(bool state) external;

    function setMaxTokensToSell(uint256 _maxTokensToSell) external;

    function setPercent(uint256 _percent) external;

    function setSaleTokenQuoterSeeder(
        address _saleToken,
        address _quoter,
        bool _dynamicSaleState,
        address _seeder
    ) external;

    function setSeeder(address _seeder) external;

    function setStakingManager(address _stakingManagerAddress) external;

    function setTimeConstant(uint256 _timeConstant) external;

    function stakeingWhitelistStatus() external view returns (bool);

    function stakingManagerInterface() external view returns (address);

    function startTime() external view returns (uint256);

    function timeConstant() external view returns (uint256);

    function totalBoughtAndStaked() external view returns (uint256);

    function totalTokensSold() external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function unpause() external;

    function usdRaised() external view returns (uint256);

    function userDeposits(address) external view returns (uint256);

    function whitelistClaimOnly() external view returns (bool);

    function whitelistUsers(address[] memory _usersToWhitelist) external;
}
