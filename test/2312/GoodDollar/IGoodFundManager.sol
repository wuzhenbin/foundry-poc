// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface GoodFundManager {
    struct InterestInfo {
        address contractAddress;
        uint256 interestBalance;
        uint256 collectedInterestSoFar;
        uint256 gasCostSoFar;
        uint256 maxGasAmountSoFar;
        bool maxGasLargerOrEqualRequired;
    }
}

interface IGoodFundManager {
    event AdminChanged(address previousAdmin, address newAdmin);
    event BeaconUpgraded(address indexed beacon);
    event CollectInterestTimeThresholdSet(
        uint256 newCollectInterestTimeThreshold
    );
    event FundsTransferred(
        address indexed caller,
        address reserve,
        address[] stakings,
        uint256 cDAIinterestEarned,
        uint256 gdUBI,
        uint256 gdReward
    );
    event GasCostExceptInterestCollectSet(
        uint256 newGasCostExceptInterestCollect
    );
    event GasCostSet(uint256 newGasCost);
    event Initialized(uint8 version);
    event InterestMultiplierSet(uint8 newInterestMultiplier);
    event StakingRewardMinted(
        address stakingContract,
        address staker,
        uint256 gdReward
    );
    event StakingRewardSet(
        uint32 _rewardsPerBlock,
        address _stakingAddress,
        uint32 _blockStart,
        uint32 _blockEnd,
        bool _isBlackListed
    );
    event Upgraded(address indexed implementation);

    function activeContracts(uint256) external view returns (address);

    function avatar() external view returns (address);

    function calcSortedContracts()
        external
        view
        returns (GoodFundManager.InterestInfo[] memory);

    function collectInterest(
        address[] memory _stakingContracts,
        bool _forceAndWaiverRewards
    ) external;

    function collectInterestTimeThreshold() external view returns (uint256);

    function dao() external view returns (address);

    function gasCostExceptInterestCollect() external view returns (uint256);

    function gdMintGasCost() external view returns (uint256);

    function getActiveContractsCount() external view returns (uint256);

    function getGasPriceInGD(
        uint256 _gasAmount
    ) external view returns (uint256);

    function getGasPriceIncDAIorDAI(
        uint256 _gasAmount,
        bool _inDAI
    ) external view returns (uint256);

    function initialize(address _ns) external;

    function interestMultiplier() external view returns (uint8);

    function lastCollectedInterest() external view returns (uint256);

    function lastCollectedInterestBlock() external view returns (uint256);

    function minCollectInterestIntervalDays() external view returns (uint8);

    function mintReward(address _token, address _user) external;

    function nameService() external view returns (address);

    function nativeToken() external view returns (address);

    function proxiableUUID() external view returns (bytes32);

    function rewardsForStakingContract(
        address
    )
        external
        view
        returns (
            uint32 blockReward,
            uint64 blockStart,
            uint64 blockEnd,
            bool isBlackListed
        );

    function setCollectInterestTimeThreshold(uint256 _timeThreshold) external;

    function setGasCost(uint256 _gasAmount) external;

    function setGasCostExceptInterestCollect(uint256 _gasAmount) external;

    function setInterestMultiplier(uint8 _newMultiplier) external;

    function setStakingReward(
        uint32 _rewardsPerBlock,
        address _stakingAddress,
        uint32 _blockStart,
        uint32 _blockEnd,
        bool _isBlackListed
    ) external;

    function updateAvatar() external;

    function upgradeTo(address newImplementation) external;

    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable;
}
