// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IFlooringPeriphery {
    function UPGRADE_INTERFACE_VERSION() external view returns (string memory);

    function WETH9() external view returns (address);

    function _flooring() external view returns (address);

    function buyAndClaimExpired(
        address collection,
        uint256[] memory tokenIds,
        uint256 claimCnt,
        uint256 maxCostToClaim,
        address swapTokenIn,
        ISwapRouter.ExactOutputParams memory swapParam
    ) external payable returns (uint256 tokenCost, uint256 claimCost);

    function buyAndClaimVault(
        address collection,
        uint256 claimCnt,
        uint256 maxCostToClaim,
        address swapTokenIn,
        ISwapRouter.ExactOutputParams memory swapParam
    ) external payable returns (uint256 tokenCost, uint256 claimCost);

    function collectionFee(
        address collection,
        address token
    ) external view returns (FeeConfig memory fee);

    function collectionInfo(
        address collection
    )
        external
        view
        returns (
            address fragmentToken,
            uint256 freeNftLength,
            uint64 lastUpdatedBucket,
            uint64 nextKeyId,
            uint64 activeSafeBoxCnt,
            uint64 infiniteCnt,
            uint64 nextActivityId,
            uint32 lastVaultAuctionPeriodTs
        );

    function collectionProxy(address proxy) external view returns (address);

    function extMulticall(
        IMulticall.CallData[] memory calls
    ) external returns (bytes[] memory);

    function fragmentAndSell(
        address collection,
        uint256[] memory tokenIds,
        bool unwrapWETH,
        ISwapRouter.ExactInputParams memory swapParam
    ) external payable returns (uint256 swapOut);

    function fragmentTokenOf(
        address collection
    ) external view returns (address token);

    function getAuction(
        address collection,
        uint256 nftId
    )
        external
        view
        returns (
            uint96 endTime,
            address bidToken,
            uint128 minimumBid,
            uint128 lastBidAmount,
            address lastBidder,
            address triggerAddress,
            uint64 activityId,
            uint8 typ,
            Fees memory fees
        );

    function getFreeNftIds(
        address collection,
        uint256 startIdx,
        uint256 size
    ) external view returns (uint256[] memory nftIds);

    function getPrivateOffer(
        address collection,
        uint256 nftId
    )
        external
        view
        returns (
            uint96 endTime,
            address token,
            uint96 price,
            address owner,
            address buyer,
            uint64 activityId,
            Fees memory fees
        );

    function getRaffle(
        address collection,
        uint256 nftId
    )
        external
        view
        returns (
            uint48 endTime,
            uint48 maxTickets,
            address token,
            uint96 ticketPrice,
            uint96 collectedFund,
            uint64 activityId,
            address owner,
            uint48 ticketSold,
            bool isSettling,
            uint256 ticketsArrLen,
            Fees memory fees
        );

    function getRaffleTicketRecords(
        address collection,
        uint256 nftId,
        uint256 startIdx,
        uint256 size
    ) external view returns (TicketRecord[] memory tickets);

    function getSafeBox(
        address collection,
        uint256 nftId
    ) external view returns (SafeBox memory safeBox);

    function initialize() external;

    function multicall(bytes[] memory data) external returns (bytes[] memory);

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external pure returns (bytes4);

    function owner() external view returns (address);

    function proxiableUUID() external view returns (bytes32);

    function setOwner(address newOwner) external;

    function supportedToken(address token) external view returns (bool);

    function tokenBalance(
        address user,
        address token
    ) external view returns (uint256);

    function uniswapRouter() external view returns (address);

    function unwrapWETH9(
        uint256 amountMinimum,
        address recipient
    ) external payable;

    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable;

    function userAccount(
        address user
    )
        external
        view
        returns (
            uint256 minMaintCredit,
            address firstCollection,
            uint8 minMaintVipLevel,
            uint256[] memory vipKeyCnts,
            uint256 lockedCredit,
            uint32 lastQuotaPeriodTs,
            uint16 safeboxQuotaUsed
        );

    function userCollection(
        address user,
        address collection,
        uint256 nftId
    )
        external
        view
        returns (
            uint256 totalLockingCredit,
            address next,
            uint32 keyCnt,
            uint32 vaultContQuota,
            uint32 lastVaultActiveTs,
            SafeBoxKey memory key
        );

    receive() external payable;
}

interface ISwapRouter {
    struct ExactOutputParams {
        bytes path;
        address recipient;
        uint256 deadline;
        uint256 amountOut;
        uint256 amountInMaximum;
    }

    struct ExactInputParams {
        bytes path;
        address recipient;
        uint256 deadline;
        uint256 amountIn;
        uint256 amountOutMinimum;
    }
}

interface IMulticall {
    struct CallData {
        address target;
        bytes callData;
    }
}

struct RoyaltyFeeRate {
    address receipt;
    uint16 marketlist;
    uint16 vault;
    uint16 raffle;
}

struct SafeboxFeeRate {
    address receipt;
    uint16 auctionOwned;
    uint16 auctionExpired;
    uint16 raffle;
    uint16 marketlist;
}

struct VaultFeeRate {
    address receipt;
    uint16 vaultAuction;
    uint16 redemptionBase;
}

struct FeeConfig {
    RoyaltyFeeRate royalty;
    SafeboxFeeRate safeboxFee;
    VaultFeeRate vaultFee;
}

struct FeeRate {
    address receipt;
    uint16 rateBips;
}

struct Fees {
    FeeRate royalty;
    FeeRate protocol;
}

struct TicketRecord {
    address buyer;
    uint48 startIdx;
    uint48 endIdx;
}

struct SafeBox {
    uint64 keyId;
    uint32 expiryTs;
    address owner;
}

struct SafeBoxKey {
    uint96 lockingCredit;
    uint64 keyId;
    uint8 vipLevel;
}
