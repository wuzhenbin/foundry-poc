// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IWooracleV2 {
    struct State {
        uint128 price;
        uint64 spread;
        uint64 coeff;
        bool woFeasible;
    }
}

interface WooracleV2_1_ZipInherit {
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

    fallback() external;

    function bases(uint8) external view returns (address);

    function bound() external view returns (uint64);

    function clOracles(
        address
    ) external view returns (address oracle, uint8 decimal, bool cloPreferred);

    function cloAddress(address base) external view returns (address clo);

    function cloPrice(
        address base
    ) external view returns (uint256 refPrice, uint256 refTimestamp);

    function decimals(address base) external view returns (uint8);

    function getBase(uint8 _id) external view returns (address);

    function inCaseTokenGotStuck(address stuckToken) external;

    function infos(
        address
    ) external view returns (uint128 price, uint64 coeff, uint64 spread);

    function isAdmin(address) external view returns (bool);

    function isWoFeasible(address base) external view returns (bool);

    function owner() external view returns (address);

    function postPrice(address base, uint128 newPrice) external;

    function postPriceLegacy(address base, uint128 newPrice) external;

    function postPriceList(
        address[] memory bases,
        uint128[] memory newPrices
    ) external;

    function postSpread(address base, uint64 newSpread) external;

    function postSpreadList(
        address[] memory bases,
        uint64[] memory newSpreads
    ) external;

    function postState(
        address base,
        uint128 newPrice,
        uint64 newSpread,
        uint64 newCoeff
    ) external;

    function postStateList(
        address[] memory bases,
        uint128[] memory newPrices,
        uint64[] memory newSpreads,
        uint64[] memory newCoeffs
    ) external;

    function price(
        address base
    ) external view returns (uint256 priceOut, bool feasible);

    function quoteToken() external view returns (address);

    function renounceOwnership() external;

    function setAdmin(address addr, bool flag) external;

    function setBase(uint8 _id, address _base) external;

    function setBound(uint64 _bound) external;

    function setCLOracle(
        address token,
        address _oracle,
        bool _cloPreferred
    ) external;

    function setCloPreferred(address token, bool _cloPreferred) external;

    function setQuoteToken(address _quote, address _oracle) external;

    function setStaleDuration(uint256 newStaleDuration) external;

    function setWooPP(address _wooPP) external;

    function staleDuration() external view returns (uint256);

    function state(
        address base
    ) external view returns (IWooracleV2.State memory);

    function timestamp() external view returns (uint256);

    function transferOwnership(address newOwner) external;

    function woCoeff(address base) external view returns (uint64);

    function woPrice(
        address base
    ) external view returns (uint128 priceOut, uint256 priceTimestampOut);

    function woSpread(address base) external view returns (uint64);

    function woState(
        address base
    ) external view returns (IWooracleV2.State memory);

    function wooPP() external view returns (address);
}
