// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

import "./IApolloXBscVault.sol";

interface IStableCoinVault {
    error AddressEmptyCode(address target);
    error AddressInsufficientBalance(address account);
    error FailedInnerCall();
    error MathOverflowedMulDiv();
    error SafeERC20FailedOperation(address token);
    event AdminChanged(address previousAdmin, address newAdmin);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event BeaconUpgraded(address indexed beacon);
    event ClaimError(string errorMessage);
    event Initialized(uint8 version);
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event Paused(address account);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Unpaused(address account);
    event Upgraded(address indexed implementation);

    function UNIT_OF_SHARES() external view returns (uint256);

    function _initialize(string memory name_, string memory symbol_) external;

    function _swap(
        address tokenForSwap,
        bytes memory aggregatorData
    ) external returns (uint256);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function balanceOfProtocolFee() external view returns (uint256);

    function claim(
        BasePortfolioV2.ClaimData memory claimData,
        bool useDump
    ) external;

    function decimals() external view returns (uint8);

    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) external returns (bool);

    function deposit(DepositData memory depositData) external;

    function getClaimableRewards(
        address owner
    )
        external
        view
        returns (BasePortfolioV2.ClaimableRewardOfAProtocol[] memory);

    function getPortfolioAllocation()
        external
        view
        returns (string[] memory, uint256[] memory);

    function getVaults() external view returns (address[] memory);

    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) external returns (bool);

    function initialize(
        string memory name_,
        string memory symbol_,
        address apolloXBscVaultAddr
    ) external;

    function name() external view returns (string memory);

    function oneInchAggregatorAddress() external view returns (address);

    function owner() external view returns (address);

    function paused() external view returns (bool);

    function pointersOfThisPortfolioForRecordingDistributedRewards(
        address,
        address
    ) external view returns (uint256);

    function portfolioAllocation(string memory) external view returns (uint256);

    function proxiableUUID() external view returns (bytes32);

    function redeem(RedeemData memory redeemData) external;

    function renounceOwnership() external;

    function rescueETH(uint256 amount) external;

    function rescueFunds(address tokenAddress, uint256 amount) external;

    function rescueFundsWithHexData(
        address destination,
        uint256 amount,
        bytes memory hexData
    ) external;

    function rewardPerShareZappedIn(
        string memory,
        address
    ) external view returns (uint256);

    function setVaultAllocations(
        BasePortfolioV2.PortfolioAllocationOfSingleCategory[]
            memory portfolioAllocation_
    ) external;

    function symbol() external view returns (string memory);

    function totalAssets()
        external
        view
        returns (BasePortfolioV2.SharesOfVault[] memory);

    function totalSupply() external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function transferOwnership(address newOwner) external;

    function updateMappings(
        string memory mappingName,
        address userAddress,
        string memory vaultName,
        address rewardTokenAddress,
        uint256 amount
    ) external;

    function updateOneInchAggregatorAddress(
        address oneInchAggregatorAddress_
    ) external;

    function upgradeTo(address newImplementation) external;

    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable;

    function userRewardPerTokenPaidPointerMapping(
        address,
        string memory,
        address
    ) external view returns (uint256);

    function userRewardsOfInvestedProtocols(
        address,
        string memory,
        address
    ) external view returns (uint256);

    receive() external payable;
}

interface BasePortfolioV2 {
    struct VaultClaimData {
        address tokenOut;
        bytes aggregatorData;
    }

    struct ClaimData {
        address receiver;
        VaultClaimData apolloXClaimData;
    }

    struct ClaimableRewardOfAProtocol {
        string protocol;
        IFeeDistribution.RewardData[] claimableRewards;
    }

    struct PortfolioAllocationOfSingleCategory {
        string protocol;
        uint256 percentage;
    }

    struct SharesOfVault {
        string vaultName;
        uint256 assets;
    }
}
