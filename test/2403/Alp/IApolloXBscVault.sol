// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IApolloXBscVault {
    error AddressEmptyCode(address target);
    error AddressInsufficientBalance(address account);
    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);
    error FailedInnerCall();
    error MathOverflowedMulDiv();
    error SafeERC20FailedOperation(address token);
    event AdminChanged(address previousAdmin, address newAdmin);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event BeaconUpgraded(address indexed beacon);
    event Deposit(
        address indexed caller,
        address indexed owner,
        uint256 assets,
        uint256 shares
    );
    event Initialized(uint8 version);
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event Paused(address account);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Unpaused(address account);
    event Upgraded(address indexed implementation);
    event Withdraw(
        address indexed caller,
        address indexed receiver,
        address indexed owner,
        uint256 assets,
        uint256 shares
    );

    function ALP() external view returns (address);

    function APX() external view returns (address);

    function _initialize(
        address asset_,
        string memory name_,
        string memory symbol_
    ) external;

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function apolloX() external view returns (address);

    function approve(address spender, uint256 amount) external returns (bool);

    function asset() external view returns (address);

    function balanceOf(address account) external view returns (uint256);

    function claim() external;

    function claimRewardsFromVaultToPortfolioVault(
        IFeeDistribution.RewardData[] memory claimableRewards
    ) external;

    function convertToAssets(
        uint256 shares
    ) external view returns (uint256 assets);

    function convertToShares(
        uint256 assets
    ) external view returns (uint256 shares);

    function decimals() external view returns (uint8);

    function decreaseAllowance(
        address spender,
        uint256 subtractedValue
    ) external returns (bool);

    function denominator() external view returns (uint256);

    function deposit(
        uint256 amount,
        DepositData memory depositData
    ) external returns (uint256);

    function deposit(
        uint256 assets,
        address receiver
    ) external returns (uint256);

    function getClaimableRewards()
        external
        view
        returns (IFeeDistribution.RewardData[] memory rewards);

    function getPerformanceFeeRateMetaData()
        external
        view
        returns (uint256, uint256);

    function increaseAllowance(
        address spender,
        uint256 addedValue
    ) external returns (bool);

    function initialize(
        address asset_,
        string memory name_,
        string memory symbol_,
        uint256 ratioAfterPerformanceFee_,
        uint256 denominator_
    ) external;

    function maxDeposit(address) external view returns (uint256);

    function maxMint(address) external view returns (uint256);

    function maxRedeem(address owner) external view returns (uint256);

    function maxWithdraw(address owner) external view returns (uint256);

    function mint(uint256 shares, address receiver) external returns (uint256);

    function name() external view returns (string memory);

    function oneInchAggregatorAddress() external view returns (address);

    function owner() external view returns (address);

    function paused() external view returns (bool);

    function previewDeposit(uint256 assets) external view returns (uint256);

    function previewMint(uint256 shares) external view returns (uint256);

    function previewRedeem(uint256 shares) external view returns (uint256);

    function previewWithdraw(uint256 assets) external view returns (uint256);

    function proxiableUUID() external view returns (bytes32);

    function ratioAfterPerformanceFee() external view returns (uint256);

    function redeem(
        uint256 shares,
        address receiver,
        address owner
    ) external returns (uint256);

    function redeem(
        uint256 shares,
        RedeemData memory redeemData
    ) external returns (uint256, address, address, bytes memory);

    function renounceOwnership() external;

    function rescueETH(uint256 amount) external;

    function rescueFunds(address tokenAddress, uint256 amount) external;

    function rescueFundsWithHexData(
        address destination,
        uint256 amount,
        bytes memory hexData
    ) external;

    function symbol() external view returns (string memory);

    function totalAssets() external view returns (uint256);

    function totalLockedAssets() external pure returns (uint256);

    function totalStakedButWithoutLockedAssets()
        external
        view
        returns (uint256);

    function totalSupply() external view returns (uint256);

    function totalUnstakedAssets() external view returns (uint256);

    function transfer(address to, uint256 amount) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    function transferOwnership(address newOwner) external;

    function updateAlpAddr(address newAddr) external;

    function updateApolloXAddr(address newAddr) external;

    function updateOneInchAggregatorAddress(
        address oneInchAggregatorAddress_
    ) external;

    function updatePerformanceFeeMetaData(
        uint256 ratioAfterPerformanceFee_,
        uint256 denominator_
    ) external;

    function upgradeTo(address newImplementation) external;

    function upgradeToAndCall(
        address newImplementation,
        bytes memory data
    ) external payable;

    function withdraw(
        uint256 assets,
        address receiver,
        address owner
    ) external returns (uint256);
}

interface IFeeDistribution {
    struct RewardData {
        address token;
        uint256 amount;
    }
}

struct ApolloXDepositData {
    address tokenIn;
    uint256 minALP;
}

struct DepositData {
    uint256 amount;
    address receiver;
    address tokenIn;
    address tokenInAfterSwap;
    bytes aggregatorData;
    ApolloXDepositData apolloXDepositData;
}

struct ApolloXRedeemData {
    address alpTokenOut;
    uint256 minOut;
    address tokenOut;
    bytes aggregatorData;
}

struct RedeemData {
    uint256 amount;
    address receiver;
    ApolloXRedeemData apolloXRedeemData;
}
