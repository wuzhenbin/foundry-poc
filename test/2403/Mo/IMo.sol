// SPDX-License-Identifier: UNLICENSED
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.8.0. SEE SOURCE BELOW. !!
pragma solidity ^0.8.4;

interface IMo {
    error AddressEmptyCode(address target);
    error AddressInsufficientBalance(address account);
    error ERC20InsufficientAllowance(
        address spender,
        uint256 allowance,
        uint256 needed
    );
    error ERC20InsufficientBalance(
        address sender,
        uint256 balance,
        uint256 needed
    );
    error ERC20InvalidApprover(address approver);
    error ERC20InvalidReceiver(address receiver);
    error ERC20InvalidSender(address sender);
    error ERC20InvalidSpender(address spender);
    error FailedInnerCall();
    error Forbidden();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error SafeERC20FailedOperation(address token);
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event RewardAdded(uint256 reward);
    event RewardPaid(address indexed user, uint256 reward);
    event Transfer(address indexed from, address indexed to, uint256 value);

    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);

    function approve(address spender, uint256 value) external returns (bool);

    function balanceOf(address account) external view returns (uint256);

    function burn() external view returns (address);

    function claim(address token, address to, uint256 amount) external;

    function decimals() external view returns (uint8);

    function earned(address user) external view returns (uint256);

    function getReward() external;

    function name() external view returns (string memory);

    function notifyRewardAmount(uint256 reward) external;

    function owner() external view returns (address);

    function pair() external view returns (address);

    function renounceOwnership() external;

    function rewardPerTokenStored() external view returns (uint256);

    function rewards(address) external view returns (uint256);

    function rewardsDistribution() external view returns (address);

    function rewardsToken() external view returns (address);

    function setBurn(address _burn) external;

    function setPair(address _pair) external;

    function setRewardsDistribution(address _rewardsDistribution) external;

    function setRewardsToken(address _rewardsToken) external;

    function setVault(address _vault) external;

    function setWhitelist(address user, bool state) external;

    function symbol() external view returns (string memory);

    function totalSupply() external view returns (uint256);

    function transfer(address to, uint256 value) external returns (bool);

    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    function transferOwnership(address newOwner) external;

    function userRewardPerTokenPaid(address) external view returns (uint256);

    function vault() external view returns (address);

    function whitelist(address) external view returns (bool);
}
